{"pageProps":{"post":{"title":"JavaScript cheat sheet in 2020","description":"List of snippets to learn basics of JavaScript","date":"2020-09-14T06:02:13.793Z","categories":"[]","keywords":["javascript","ecmascript","es2015"],"slug":"javascript-cheat-sheet-in-2020-9-14-2020","isDraft":false,"image":"/img/blog/ecmascript.png","html":"<p><img src=\"/img/blog/ecmascript.png\" alt=\"Evolution of ECMAScript\">\n<a href=\"https://engineering.carsguide.com.au/javascript-context-ecmascript-84d709ef9165\">Source</a></p>\n<h2 id=\"user-content-basic-javascript-syntax\"><a href=\"#basic-javascript-syntax\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a>Basic JavaScript syntax</h2>\n<p>If you want to learn from a book, this is a great one <a href=\"https://exploringjs.com/impatient-js/toc.html\">https://exploringjs.com/impatient-js/toc.html</a></p>\n<h3 id=\"user-content-variable-definition\"><a href=\"#variable-definition\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Variable definition</strong></h3>\n<div><pre><code><span>const</span> a <span>=</span> <span>123</span><span>;</span>\n\n<span>let</span> b <span>=</span> <span>123</span><span>;</span>\nb <span>=</span> a<span>;</span>\n\n<span>var</span> c <span>=</span> <span>123</span><span>;</span>\nc <span>=</span> a<span>;</span>\n</code></pre></div>\n<h3 id=\"user-content-function-definition\"><a href=\"#function-definition\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Function definition</strong></h3>\n<div><pre><code><span>// function definition</span>\n<span>function</span> <span>myFunction</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n\n<span>// function as a variable</span>\n<span>const</span> <span>myFunction</span> <span>=</span> <span>function</span> <span>myFunction</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>\n\n<span>// anonymous function</span>\n<span>const</span> <span>myFunction</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>\n\n<span>// arrow function</span>\n<span>const</span> <span>myFunction</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>;</span>\n</code></pre></div>\n<h3 id=\"user-content-strings\"><a href=\"#strings\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Strings</strong></h3>\n<div><pre><code><span>const</span> a <span>=</span> <span>\"Hello, world\"</span><span>;</span>\n\na<span>.</span><span>length</span><span>;</span> <span>// 12</span>\n\na<span>.</span><span>slice</span><span>(</span><span>3</span><span>,</span> <span>-</span><span>3</span><span>)</span><span>;</span> <span>// \"lo, wo\"</span>\n\na<span>.</span><span>split</span><span>(</span><span>\",\"</span><span>)</span><span>;</span> <span>// [\"Hello\", \" world]</span>\n\na<span>.</span><span>charAt</span><span>(</span><span>0</span><span>)</span><span>;</span> <span>// \"H\"</span>\n\na<span>[</span><span>0</span><span>]</span><span>;</span> <span>// \"H\"</span>\n\na<span>.</span><span>replace</span><span>(</span><span>\"world\"</span><span>,</span> <span>\"you!\"</span><span>)</span><span>;</span> <span>// \"Hello, you!\"</span>\n\na<span>.</span><span>slice</span><span>(</span><span>6</span><span>)</span><span>.</span><span>trim</span><span>(</span><span>)</span><span>;</span> <span>// \" world\" trims into \"world\"</span>\n\n<span>const</span> b <span>=</span> a <span>+</span> <span>\". Sup?\"</span><span>;</span> <span>// \"Hello, world. Sup?\" (single quotes are also accepted)</span>\n\n<span>const</span> c <span>=</span> <span><span>`</span><span><span>${</span>b<span>}</span></span><span>`</span></span><span>;</span> <span>// Template strings can interpolate variables</span>\n</code></pre></div>\n<h3 id=\"user-content-arrays\"><a href=\"#arrays\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Arrays</strong></h3>\n<div><pre><code><span>const</span> a <span>=</span> <span>[</span><span>\"Hello,\"</span><span>,</span> <span>\"world\"</span><span>]</span>\n\na<span>.</span><span>length</span> <span>// 2</span>\n\na<span>.</span><span>join</span><span>(</span><span>\" \"</span><span>)</span><span>;</span> <span>// \"Hello, world\"</span>\n\na<span>[</span><span>0</span><span>]</span> <span>// \"Hello,\"</span>\n\na<span>[</span>a<span>.</span><span>length</span> <span>-</span><span>1</span><span>]</span> <span>// \"world\"</span>\n\na<span>.</span><span>concat</span><span>(</span><span>\"!\"</span><span>)</span> <span>// [\"Hello,\", \"world\", \"!\"]</span>\n\na<span>.</span><span>find</span><span>(</span>e â‡’ e <span>===</span> <span>\"!\"</span><span>)</span> <span>// \"!\"</span>\n\na<span>.</span><span>find</span><span>(</span>e â‡’ e <span>===</span> <span>\"definitely not in array\"</span><span>)</span> <span>// undefined</span>\n\na<span>.</span><span>indexOf</span><span>(</span><span>\"world\"</span><span>)</span> <span>// 1</span>\n\na<span>.</span><span>push</span><span>(</span><span>\"Sup?\"</span><span>)</span> <span>// returns new length of mutated array [\"Hello,\", \"world\", \"!\", \"Sup?\"]</span>\n\na<span>.</span><span>pop</span><span>(</span><span>)</span> <span>// removes last item</span>\n\nb<span>.</span><span>shift</span><span>(</span><span>)</span> <span>// removes  first item, shifts left, [\"world\", \"!\"]</span>\n\nb<span>.</span><span>unshift</span><span>(</span><span>\"Hello!\"</span><span>)</span> <span>// puts new item to beginning [\"Hello!\", \"world\", \"!\"]</span>\n\n<span>// destructuring</span>\n<span>const</span> <span>[</span>first<span>,</span> second<span>]</span> <span>=</span> <span>[</span><span>\"Hello\"</span><span>,</span> <span>\"world\"</span><span>]</span> <span>// first is Hello\", second is \"world\"</span>\n<span>const</span> <span>[</span>first<span>,</span> <span>...</span>rest<span>]</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span> <span>// first is 1, rest is [2, 3, 4]</span>\n\n<span>// spreading</span>\n<span>const</span> c <span>=</span> <span>[</span>first<span>,</span> <span>...</span>rest<span>]</span> <span>// c is [1, 2, 3, 4]</span>\n\n</code></pre></div>\n<h3 id=\"user-content-objects\"><a href=\"#objects\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Objects</strong></h3>\n<p>JSON is first class citizen. The quotes around key aren't necessary.</p>\n<div><pre><code><span>const</span> o <span>=</span> <span>{</span>\n\n  <span>name</span><span>:</span> <span>\"Human\"</span><span>,</span>\n\n  <span>age</span><span>:</span> <span>200000</span><span>,</span>\n\n  <span>greet</span> <span>(</span><span>)</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>Hi! I'm </span><span><span>${</span><span>this</span><span>.</span><span>name</span><span>}</span></span><span> and I'm </span><span><span>${</span><span>this</span><span>.</span><span>age</span><span>}</span></span><span> years old</span><span>`</span></span><span>)</span><span>;</span>\n  <span>}</span>\n\n<span>}</span>\n\no<span>.</span><span>greet</span><span>(</span><span>)</span><span>;</span> <span>// prints \"Hi! I'm Human and I'm 200000 years old\"</span>\n<span>[</span>o<span>.</span><span>name</span><span>]</span><span>(</span>http<span>:</span><span>/</span><span>/</span>o<span>.</span><span>name</span><span>)</span> <span>// \"Human\"</span>\n\no<span>[</span><span>'age'</span><span>]</span> <span>// 200000</span>\n\n<span>const</span> key <span>=</span> condition <span>?</span> <span>\"name\"</span> <span>:</span> <span>\"age\"</span><span>;</span>\n\no<span>[</span>key<span>]</span> <span>// depending on condition it'll be \"Human\" or 200000</span>\n\no<span>.</span><span>newKey</span> <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>;</span> <span>// o now has name, age and newKey</span>\n\n<span>Object</span><span>.</span><span>keys</span><span>(</span>o<span>)</span> <span>// [\"name\", \"age\", \"newKey\"]</span>\n\n<span>Object</span><span>.</span><span>entries</span><span>(</span>o<span>)</span> <span>// [[\"name\", \"Human\"], [\"age\", 200000], [\"newKey\", [1,2,3]]</span>\n\n<span>// destructuring</span>\n\n<span>const</span> <span>{</span>name<span>}</span> <span>=</span> o<span>;</span> <span>// name is Human</span>\n<span>const</span> <span>{</span>\n  greet<span>,</span>\n  <span>...</span>restOfObject\n<span>}</span> <span>=</span> o<span>;</span> <span>// greet is function, restOfObject is {name: \"Human\", age: 200000}</span>\n\n<span>// spreading</span>\n<span>const</span> myNewPerson <span>=</span> <span>{</span>\n  <span>...</span>restOfObject<span>,</span>\n  <span>greet</span> <span>(</span><span>)</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span><span>`</span><span>Yo! This is </span><span><span>${</span><span>this</span><span>.</span><span>name</span><span>}</span></span><span> over here. Imma </span><span><span>${</span><span>this</span><span>.</span><span>age</span><span>}</span></span><span> year old!</span><span>`</span></span><span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// property shorthands</span>\n\n<span>const</span> myName <span>=</span> <span>\"is khan\"</span><span>;</span>\n\n<span>const</span> object <span>=</span> <span>{</span> myName <span>}</span> <span>// same as { myName: myName }</span>\n</code></pre></div>\n<h3 id=\"user-content-conditional-constructs\"><a href=\"#conditional-constructs\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Conditional Constructs</strong></h3>\n<div><pre><code><span>if</span> <span>(</span>condition<span>)</span> <span>{</span>\n  <span>a</span><span>(</span><span>)</span><span>;</span>\n<span>}</span> <span>else</span> <span>if</span> <span>(</span>condition2<span>)</span> <span>{</span>\n  <span>b</span><span>(</span><span>)</span><span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n  <span>c</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\ncondition <span>?</span> <span>a</span><span>(</span><span>)</span> <span>:</span> condition2 <span>?</span> <span>b</span><span>(</span><span>)</span> <span>:</span> <span>c</span><span>(</span><span>)</span><span>;</span>\n\ncondition <span>&#x26;&#x26;</span> <span>a</span><span>(</span><span>)</span><span>;</span> <span>// iff condition is truth-y, a would be executed</span>\n\n<span>a</span><span>(</span><span>)</span> <span>||</span> <span>b</span><span>(</span><span>)</span><span>;</span> <span>// if result of a() is truth-y, b won't be executed</span>\n</code></pre></div>\n<h3 id=\"user-content-looping-constructs\"><a href=\"#looping-constructs\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Looping Constructs</strong></h3>\n<div><pre><code><span>// for loop</span>\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&#x3C;</span> arr<span>.</span><span>length</span><span>;</span> i<span>++</span><span>)</span> <span>{</span><span>}</span>\n\n<span>//while loo</span>\n<span>let</span> i <span>=</span> <span>0</span><span>;</span>\n\n<span>while</span> <span>(</span>i <span>&#x3C;</span> arr<span>.</span><span>length</span><span>)</span> <span>{</span>\n  i<span>++</span><span>;</span>\n<span>}</span>\n\n<span>// do-while</span>\n<span>let</span> i <span>=</span> <span>0</span><span>;</span>\n\n<span>do</span> <span>{</span>\n  i<span>++</span><span>;</span>\n<span>}</span> <span>while</span> <span>(</span>i <span>&#x3C;</span> arr<span>.</span><span>length</span><span>)</span><span>;</span>\n\n<span>// for-in loop to loop through keys of an object</span>\n\n<span>for</span> <span>(</span><span>let</span> key <span>in</span> object<span>)</span> <span>{</span>\n<span>}</span>\n\n<span>// for-of loop to loop through values of an array</span>\n\n<span>for</span> <span>(</span><span>let</span> value <span>of</span> array<span>)</span> <span>{</span>\n<span>}</span>\n</code></pre></div>\n<h3 id=\"user-content-functional\"><a href=\"#functional\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Functional</strong></h3>\n<div><pre><code><span>// loops through all items of arr array</span>\narr<span>.</span><span>forEach</span><span>(</span><span>(</span><span>index<span>,</span> value<span>,</span> array</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>)</span><span>;</span>\n\n<span>// loops through all items of arr array and returns modified array</span>\narr<span>.</span><span>map</span><span>(</span><span>(</span><span>index<span>,</span> value<span>,</span> array</span><span>)</span> <span>=></span> modifiedItem<span>)</span><span>;</span>\n\n<span>// returns array with items where cond(value) is true</span>\narr<span>.</span><span>filter</span><span>(</span><span>(</span><span>index<span>,</span> value<span>,</span> array</span><span>)</span> <span>=></span> <span>cond</span><span>(</span>value<span>)</span><span>)</span><span>;</span>\n\n<span>// returns true if any item has cond(value) true</span>\narr<span>.</span><span>some</span><span>(</span><span>(</span><span>index<span>,</span> value<span>,</span> array</span><span>)</span> <span>=></span> <span>cond</span><span>(</span>value<span>)</span><span>)</span><span>;</span>\n\n<span>// returns true if all items have cond(value) true</span>\narr<span>.</span><span>every</span><span>(</span><span>(</span><span>index<span>,</span> value<span>,</span> array</span><span>)</span> <span>=></span> <span>cond</span><span>(</span>value<span>)</span><span>)</span><span>;</span>\n\n<span>// returns undefined or first item matching cond(value)</span>\narr<span>.</span><span>find</span><span>(</span><span>(</span><span>index<span>,</span> value<span>,</span> array</span><span>)</span> <span>=></span> <span>cond</span><span>(</span>value<span>)</span><span>)</span><span>;</span>\n</code></pre></div>\n<h3 id=\"user-content-classes\"><a href=\"#classes\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Classes</strong></h3>\n<div><pre><code><span>class</span> <span>A</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span><span>name</span> <span>=</span> name<span>;</span>\n  <span>}</span>\n  <span>static</span> variable <span>=</span> <span>123</span><span>;</span>\n  <span>static</span> <span>utilityMethod</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n  <span>method</span><span>(</span><span>)</span> <span>{</span><span>}</span>\n<span>}</span>\n\n<span>const</span> a <span>=</span> <span>new</span> <span>A</span><span>(</span><span>\"Human\"</span><span>)</span><span>;</span>\n\na<span>.</span><span>method</span><span>(</span><span>)</span><span>;</span>\n\n<span>A</span><span>.</span><span>utilityMethod</span><span>(</span><span>)</span><span>;</span>\n\n<span>A</span><span>.</span><span>variable</span><span>;</span>\n\n<span>// Shorthand for instance variables</span>\n<span>class</span> <span>B</span> <span>{</span>\n  counter <span>=</span> <span>0</span><span>;</span>\n  <span>increment</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>this</span><span>.</span><span>counter</span> <span>+=</span> <span>1</span><span>;</span>\n    <span>return</span> <span>this</span><span>.</span><span>counter</span><span>;</span>\n  <span>}</span><span>;</span>\n<span>}</span>\n<span>// same as</span>\n<span>class</span> <span>B</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span><span>counter</span> <span>=</span> <span>0</span><span>;</span>\n    <span>this</span><span>.</span><span>increment</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n      <span>this</span><span>.</span><span>counter</span> <span>+=</span> <span>1</span><span>;</span>\n      <span>return</span> <span>this</span><span>.</span><span>counter</span><span>;</span>\n    <span>}</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// Difference between defining instance method and class method (class A#method)</span>\n<span>// is that instance methods are created for each instance</span>\n<span>// while class method reference is reused between all instances</span>\n<span>// so if you're dealing with a lot of instances of same class</span>\n<span>// method will be better memory-wise</span>\n</code></pre></div>\n<h3 id=\"user-content-asynchronous-code\"><a href=\"#asynchronous-code\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Asynchronous code</strong></h3>\n<div><pre><code><span>// Callbacks</span>\n<span>function</span> <span>executeAfterOneSecond</span> <span>(</span><span>fn</span><span>)</span> <span>{</span>\n  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>\n    <span>fn</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>executeAfterOneSecond</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>console</span><span>.</span><span>log</span><span>(</span><span>\"b\"</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>\"a\"</span><span>)</span><span>;</span>\n\n<span>// unlike blocking languages, setTimeout won't block execution</span>\n<span>// we'll see \"a\" and \"b\" after a second, even if we've b being executed before</span>\n\n<span>// Learn more about event loop: https://www.youtube.com/watch?v=8aGhZQkoFbQ</span>\n\n<span>// In this example we saw setTimeout accepting a function and so did executeAfterOneSecond</span>\n<span>// This makes it a higher order function, and fn is called a callback</span>\n<span>// as in, once you're done, call [me] back.</span>\n\n<span>// Promises</span>\n<span>// Imagine everything being executed via callbacks</span>\n<span>callApi</span><span>(</span>apiUrl<span>,</span> <span>(</span><span>result</span><span>)</span> <span>=></span> <span>{</span>\n  <span>convertToJson</span><span>(</span>result<span>,</span> <span>(</span><span>json</span><span>)</span> <span>=></span> <span>{</span>\n\t<span>transformData</span><span>(</span>json<span>,</span> <span>(</span><span>data</span><span>)</span> <span>=></span> <span>{</span>\n\t\t<span>callAnotherApi</span><span>(</span>apiUrl2<span>,</span> data<span>,</span> <span>(</span><span>finalResult</span><span>)</span> <span>=></span> <span>{</span>\n\t\t\t<span>notifyUser</span><span>(</span>finalResult<span>)</span><span>;</span>\n\t\t<span>}</span><span>)</span><span>;</span>\n        <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// While this is good as our code doesn't block any user action like scrolling</span>\n<span>// it's hard to read and is usually referred to as \"Callback hell\"</span>\n\n<span>// Promises were designed to make this pyramid shape more flat</span>\n\n<span>// A promise is an instance of class Promise that has two main methods then &#x26; catch</span>\n\n<span>const</span> <span>callApi</span> <span>=</span> <span>apiUrl</span> <span>=></span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>\n  <span>lowLevelFunctionToCallNetwork</span><span>(</span>apiUrl<span>,</span> <span>(</span><span>err<span>,</span> data</span><span>)</span> <span>=></span> <span>{</span>\n    <span>if</span> <span>(</span>err<span>)</span> <span>reject</span><span>(</span>err<span>)</span><span>;</span>\n    <span>else</span> <span>resolve</span><span>(</span>data<span>)</span><span>;</span>\n  <span>}</span><span>)</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>callApi</span><span>(</span>apiUrl<span>)</span>\n  <span>.</span><span>then</span><span>(</span>convertToJson<span>)</span>\n  <span>.</span><span>then</span><span>(</span>transformData<span>)</span>\n  <span>.</span><span>then</span><span>(</span><span>(</span><span>data</span><span>)</span> <span>=></span> <span>callAnotheApi</span><span>(</span>apiUrl2<span>,</span> data<span>)</span><span>)</span>\n  <span>.</span><span>then</span><span>(</span>notifyUser<span>)</span><span>;</span>\n\n<span>// Async/await makes it even more easier</span>\n\n<span>async</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>const</span> result <span>=</span> <span>await</span> <span>callApi</span><span>(</span>apiUrl<span>)</span><span>;</span>\n  <span>const</span> json <span>=</span> <span>await</span> <span>transformData</span><span>(</span>result<span>)</span><span>;</span>\n  <span>const</span> finalResult <span>=</span>  <span>callAnotherApi</span><span>(</span>apiUrl2<span>,</span> data<span>)</span><span>;</span>\n  <span>notifyUser</span><span>(</span>finalResult<span>)</span><span>;</span>\n<span>}</span><span>(</span><span>)</span><span>;</span>\n</code></pre></div>\n<h3 id=\"user-content-module-system\"><a href=\"#module-system\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Module system</strong></h3>\n<p>In my opinion, frontend code grows much faster than backend code. Not only you deal with calling various APIs and data transformation techniques, you also bind all that to UI, while taking care of navigation, animations, performance, accessibility and so on.</p>\n<p>Without the ability of converting code snippets into tiny reusable modules, you'll end up in a great spaghetti code with business logic, API logic, performance optimizations, UI, animations etc. all in one file.</p>\n<p>Let's first cover imports</p>\n<div><pre><code><span>// assuming \"react\" is in package.json's dependencies</span>\n<span>// present in &#x3C;root>/node_modules</span>\n\n<span>// imports only the the default export.</span>\n<span>import</span> <span><span>React</span></span> <span>from</span> <span>\"react\"</span><span>;</span>\n<span>// imports all the named and default export as React.</span>\n<span>import</span> <span><span>*</span> <span>as</span> <span>React</span></span> <span>from</span> <span>\"react\"</span><span>;</span>\n\n<span>// you can change the name as you find fit</span>\n<span>// note: in case of React you really need to name it React for JSX transpilation</span>\n<span>import</span> <span><span>ICanChangeTheNameToAnything</span></span> <span>from</span> <span>\"react\"</span><span>;</span>\n\n<span>// you can destructure from modules</span>\n<span>import</span> <span><span>{</span> <span>Component</span><span>,</span> useState<span>,</span> useEffect <span>}</span></span> <span>from</span> <span>\"react\"</span><span>;</span>\n\n<span>// you can rename a destructured value from a module using `as` keyword.</span>\n<span>import</span> <span><span>{</span> <span>Component</span> <span>as</span> <span>ReactComponent</span> <span>}</span></span> <span>from</span> <span>\"react\"</span><span>;</span>\n\n<span>// for local imports, you need to give relative path (in context of current file)</span>\n<span>import</span> <span><span>*</span> <span>as</span> mypackage</span> <span>from</span> <span>\"./my-package\"</span><span>;</span>\n\n<span>// All import paths have to be statically known, so you can't put a variable in there.</span>\n</code></pre></div>\n<p>Now that we know how to import, let's focus on exports</p>\n<div><pre><code><span>export</span> <span>const</span> a <span>=</span> <span>1</span><span>;</span> <span>// imported as import {a} from './my-package';</span>\n\n<span>export</span> <span>function</span> <span>print</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>\n  <span>// imported as import {print} from \"./my-package\";</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>...</span>args<span>)</span><span>;</span>\n<span>}</span>\n\n<span>const</span> b <span>=</span> <span>2</span><span>;</span>\n<span>const</span> c <span>=</span> <span>3</span><span>;</span>\n<span>const</span> d <span>=</span> <span>4</span><span>;</span>\n\n<span>export</span> <span><span>{</span> b<span>,</span> c<span>,</span> d <span>}</span></span><span>;</span> <span>// imported as import { b, c, d } from \"./my-package\";</span>\n\n<span>export</span> <span>default</span> a<span>;</span> <span>// imported as import a from \"./my-package\";</span>\n\n<span>export</span> <span><span>*</span></span> <span>from</span> <span>\"./some-other-package\"</span><span>;</span> <span>// exports evertyhing in some-other-package</span>\n</code></pre></div>\n","fileName":"JavaScript cheatsheet in 2020.md"}},"__N_SSG":true}