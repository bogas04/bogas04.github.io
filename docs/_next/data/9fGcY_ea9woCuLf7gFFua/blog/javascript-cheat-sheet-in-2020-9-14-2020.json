{"pageProps":{"post":{"title":"JavaScript cheat sheet in 2020","description":"List of snippets to learn basics of JavaScript","date":"2020-09-14T06:02:13.793Z","categories":"[]","keywords":["javascript","ecmascript","es2015"],"slug":"javascript-cheat-sheet-in-2020-9-14-2020","isDraft":false,"image":"/img/blog/ecmascript.png","html":"<p><img src=\"/img/blog/ecmascript.png\" alt=\"Evolution of ECMAScript\">\n<a href=\"https://engineering.carsguide.com.au/javascript-context-ecmascript-84d709ef9165\">Source</a></p>\n<h2 id=\"basic-javascript-syntax\"><a href=\"#basic-javascript-syntax\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a>Basic JavaScript syntax</h2>\n<p>If you want to learn from a book, this is a great one <a href=\"https://exploringjs.com/impatient-js/toc.html\">https://exploringjs.com/impatient-js/toc.html</a></p>\n<h3 id=\"variable-definition\"><a href=\"#variable-definition\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Variable definition</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"function-definition\"><a href=\"#function-definition\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Function definition</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code><span class=\"token comment\">// function definition</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// function as a variable</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// anonymous function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"strings\"><a href=\"#strings\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Strings</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo, wo\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"Hello\", \" world]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"H\"</span>\n\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"H\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, you!\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" world\" trims into \"world\"</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\". Sup?\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, world. Sup?\" (single quotes are also accepted)</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Template strings can interpolate variables</span>\n</code></pre></div>\n<h3 id=\"arrays\"><a href=\"#arrays\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Arrays</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello,\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token comment\">// 2</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, world\"</span>\n\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"Hello,\"</span>\n\na<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"world\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"Hello,\", \"world\", \"!\"]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>e â‡’ e <span class=\"token operator\">===</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"!\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>e â‡’ e <span class=\"token operator\">===</span> <span class=\"token string\">\"definitely not in array\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sup?\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns new length of mutated array [\"Hello,\", \"world\", \"!\", \"Sup?\"]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// removes last item</span>\n\nb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// removes  first item, shifts left, [\"world\", \"!\"]</span>\n\nb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// puts new item to beginning [\"Hello!\", \"world\", \"!\"]</span>\n\n<span class=\"token comment\">// destructuring</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// first is Hello\", second is \"world\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// first is 1, rest is [2, 3, 4]</span>\n\n<span class=\"token comment\">// spreading</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token comment\">// c is [1, 2, 3, 4]</span>\n\n</code></pre></div>\n<h3 id=\"objects\"><a href=\"#objects\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Objects</strong></h3>\n<p>JSON is first class citizen. The quotes around key aren't necessary.</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Human\"</span><span class=\"token punctuation\">,</span>\n\n  age<span class=\"token operator\">:</span> <span class=\"token number\">200000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">greet</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints \"Hi! I'm Human and I'm 200000 years old\"</span>\n<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>o<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Human\"</span>\n\no<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 200000</span>\n\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">;</span>\n\no<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token comment\">// depending on condition it'll be \"Human\" or 200000</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token property-access\">newKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// o now has name, age and newKey</span>\n\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"name\", \"age\", \"newKey\"]</span>\n\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [[\"name\", \"Human\"], [\"age\", 200000], [\"newKey\", [1,2,3]]</span>\n\n<span class=\"token comment\">// destructuring</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span> <span class=\"token comment\">// name is Human</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  greet<span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>restOfObject\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span> <span class=\"token comment\">// greet is function, restOfObject is {name: \"Human\", age: 200000}</span>\n\n<span class=\"token comment\">// spreading</span>\n<span class=\"token keyword\">const</span> myNewPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>restOfObject<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">greet</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Yo! This is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> over here. Imma </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> year old!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// property shorthands</span>\n\n<span class=\"token keyword\">const</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">\"is khan\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> myName <span class=\"token punctuation\">}</span> <span class=\"token comment\">// same as { myName: myName }</span>\n</code></pre></div>\n<h3 id=\"conditional-constructs\"><a href=\"#conditional-constructs\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Conditional Constructs</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>condition2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ncondition <span class=\"token operator\">?</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> condition2 <span class=\"token operator\">?</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncondition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// iff condition is truth-y, a would be executed</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// if result of a() is truth-y, b won't be executed</span>\n</code></pre></div>\n<h3 id=\"looping-constructs\"><a href=\"#looping-constructs\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Looping Constructs</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token comment\">// for loop</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//while loo</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// do-while</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">do</span> <span class=\"token punctuation\">{</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for-in loop to loop through keys of an object</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// for-of loop to loop through values of an array</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"functional\"><a href=\"#functional\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Functional</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token comment\">// loops through all items of arr array</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// loops through all items of arr array and returns modified array</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> modifiedItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns array with items where cond(value) is true</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns true if any item has cond(value) true</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns true if all items have cond(value) true</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns undefined or first item matching cond(value)</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"classes\"><a href=\"#classes\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Classes</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> variable <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">utilityMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Human\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">utilityMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">variable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Shorthand for instance variables</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// same as</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Difference between defining instance method and class method (class A#method)</span>\n<span class=\"token comment\">// is that instance methods are created for each instance</span>\n<span class=\"token comment\">// while class method reference is reused between all instances</span>\n<span class=\"token comment\">// so if you're dealing with a lot of instances of same class</span>\n<span class=\"token comment\">// method will be better memory-wise</span>\n</code></pre></div>\n<h3 id=\"asynchronous-code\"><a href=\"#asynchronous-code\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Asynchronous code</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token comment\">// Callbacks</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">executeAfterOneSecond</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">executeAfterOneSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// unlike blocking languages, setTimeout won't block execution</span>\n<span class=\"token comment\">// we'll see \"a\" and \"b\" after a second, even if we've b being executed before</span>\n\n<span class=\"token comment\">// Learn more about event loop: https://www.youtube.com/watch?v=8aGhZQkoFbQ</span>\n\n<span class=\"token comment\">// In this example we saw setTimeout accepting a function and so did executeAfterOneSecond</span>\n<span class=\"token comment\">// This makes it a higher order function, and fn is called a callback</span>\n<span class=\"token comment\">// as in, once you're done, call [me] back.</span>\n\n<span class=\"token comment\">// Promises</span>\n<span class=\"token comment\">// Imagine everything being executed via callbacks</span>\n<span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">convertToJson</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">transformData</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">callAnotherApi</span><span class=\"token punctuation\">(</span>apiUrl2<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">finalResult</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">notifyUser</span><span class=\"token punctuation\">(</span>finalResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// While this is good as our code doesn't block any user action like scrolling</span>\n<span class=\"token comment\">// it's hard to read and is usually referred to as \"Callback hell\"</span>\n\n<span class=\"token comment\">// Promises were designed to make this pyramid shape more flat</span>\n\n<span class=\"token comment\">// A promise is an instance of class Promise that has two main methods then &amp; catch</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callApi</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">apiUrl</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">lowLevelFunctionToCallNetwork</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">else</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>convertToJson<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>transformData<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">callAnotheApi</span><span class=\"token punctuation\">(</span>apiUrl2<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>notifyUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Async/await makes it even more easier</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> finalResult <span class=\"token operator\">=</span>  <span class=\"token function\">callAnotherApi</span><span class=\"token punctuation\">(</span>apiUrl2<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">notifyUser</span><span class=\"token punctuation\">(</span>finalResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"module-system\"><a href=\"#module-system\" aria-hidden=\"true\" tabindex=\"-1\"><span>ðŸ”— </span></a><strong>Module system</strong></h3>\n<p>In my opinion, frontend code grows much faster than backend code. Not only you deal with calling various APIs and data transformation techniques, you also bind all that to UI, while taking care of navigation, animations, performance, accessibility and so on.</p>\n<p>Without the ability of converting code snippets into tiny reusable modules, you'll end up in a great spaghetti code with business logic, API logic, performance optimizations, UI, animations etc. all in one file.</p>\n<p>Let's first cover imports</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token comment\">// assuming \"react\" is in package.json's dependencies</span>\n<span class=\"token comment\">// present in &lt;root&gt;/node_modules</span>\n\n<span class=\"token comment\">// imports only the the default export.</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// imports all the named and default export as React.</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// you can change the name as you find fit</span>\n<span class=\"token comment\">// note: in case of React you really need to name it React for JSX transpilation</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ICanChangeTheNameToAnything</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// you can destructure from modules</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// you can rename a destructured value from a module using `as` keyword.</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">ReactComponent</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for local imports, you need to give relative path (in context of current file)</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> mypackage</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./my-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// All import paths have to be statically known, so you can't put a variable in there.</span>\n</code></pre></div>\n<p>Now that we know how to import, let's focus on exports</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// imported as import {a} from './my-package';</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// imported as import {print} from \"./my-package\";</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// imported as import { b, c, d } from \"./my-package\";</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// imported as import a from \"./my-package\";</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token operator\">*</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./some-other-package\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exports evertyhing in some-other-package</span>\n</code></pre></div>\n"}},"__N_SSG":true}