{"pageProps":{"posts":[{"title":"How Holi is related to narcissism and patriarchy","description":"My views on emotional abuse done by narcissistic parents and how the epic of Bhagat Prahlad relates to it.","date":"2021-03-22T06:02:13.793Z","categories":"[spirituality, sikhi]","keywords":["prahlad","emotional abuse","narcissistic parents","sikhi","hindu mythology"],"slug":"how-holi-is-related-to-narcissism-and-patriarchy-3-22-2021","isDraft":false,"image":"../../public/img/blog/prahlad-1.jpg","html":"<blockquote>\n<p>Originally a <a href=\"https://twitter.com/i/status/1373926490279178245\">Twitter Thread</a>.</p>\n</blockquote>\n<p>With Holi coming up and me witnessing a lot of turmoil in my personal life, I was forced to think about Holi in a very specific way. At risk of over-simplifying and appropriating the narrative, here are my unpopular views on the epic of Bhagat Prahlad and how it relates with narcissism and toxic patriarchy.</p>\n<p><img src=\"../../public/img/blog/prahlad-1.jpg\" alt=\"Bhagat Prahlad in pyre chanting Ram Ram while his father watches him burn\"></p>\n<p>If you are to believe the ancient epic of Bhagat Prahlad and Hirnaykashyap, AKA Harnaakash in Sikhi, you'll find some interesting things around patriarchal family dynamics. There was an ideological difference between Prahlad and his father. His father felt superior and he felt that he was worthy of worship. This inflated self-view was further exemplified by the fact that his province &#x26; society agreed, thanks to his boon of invincibility.</p>\n<p><img src=\"../../public/img/blog/prahlad-2.jpg\" alt=\"Prahlad in lap of his angry father\"></p>\n<p>Prahlad, on other hand, by grace of his own wisdom given by Narad, believed Vishnu to be his God. This was completely unacceptable to his narcissist father. Prahlad's defiance was followed by series of attempts by his father to get his son to conform to his ideology.</p>\n<p><img src=\"../../public/img/blog/prahlad-3.jpg\" alt=\"Narad giving spiritual wisdom to Prahlad&#x27;s pregnant mother\"></p>\n<p>While the world around Hirnaykashyap believed him to be equivalent of God, Prahlad didn't bow down to his teachers, friends, sister and as well as his mother. He stood against and outright fought the entire world for his right to lead his life his way.</p>\n<p><img src=\"../../public/img/blog/prahlad-4.jpg\" alt=\"Prahlad thrown off cliff only to be protected by Vishnu\"></p>\n<p>Imagine what a typical patriarchal mindset person in that era would have said. Wouldn't they instruct Prahald to leave his ego and just bow down to his parents? After all, his mother nurtured and nourished him, and his father took care of him, isn't it his moral obligation?</p>\n<p><img src=\"../../public/img/blog/prahlad-5.jpg\" alt=\"Prahlad preaching his friends about Vishnu\"></p>\n<p>Guru Amardaas Jee, 3rd Guru of Sikhs, in his <a href=\"http://sttm.co/s/4054/48255\">rendition</a> of the epic, shows how Prahlad talks back to his own mother.</p>\n<p><img src=\"../../public/img/blog/prahlad-6.jpg\" alt=\"Shabad in Guru Granth Sahib showing how Bhagat Prahlad defies his mother\"></p>\n<p>Ultimately, after multiple attempts of coercing Prahlad, including multiple attempts of murder for not agreeing with his father, Prahlad was protected by Narsingh (an avatar of Vishnu) after He killed his father, thanks to some loop-hole in the invincibility spell.</p>\n<p><img src=\"../../public/img/blog/prahlad-7.jpg\" alt=\"Narsingh killing Hirnaykashyap\"></p>\n<p>My point over here is that, since bygones we know of narcissism &#x26; toxic patriarchy, and this story shows how a minor stood up against something he believed to be false and didn't bow down at all. In the world of obedient <a href=\"https://en.wikipedia.org/wiki/Shravan\">Shravan Kumar</a> &#x26; Raam, we also have disobedient Prahald.</p>\n<p><img src=\"../../public/img/blog/prahlad-8.jpg\" alt=\"Shravan Kumar carrying his disabled parents\"></p>\n<p>Whether you believe children should indeed never defy their parents, or that Prahlad was an exception because he was a devotee of Vishnu, truth is that Prahlad wasn't supported by anyone he could rely on (his parents, siblings, friends or school) but he didn't conform to them.</p>\n<p>In my opinion, the notion that children must be obedient to their parents is rejected by this story. Whether Prahlad was right or wrong, that's a separate ideological question, but we all can agree that children have been defying parents since bygones &#x26; Sikhi even celebrates that.</p>\n<p>The number of times Prahlad's story is mentioned in Sikhi, makes me feel that Gurus didn't really want Sikhs to become obedient children of their parents, but rather be autonomous and sovereign. Defiance against old systems is pretty much a norm in Sikhi.</p>\n<p>Controlling parents and emotional abuse by narcissistic parents is not a new story, and it even needed intervention by Vishnu themself to save Prahlad.</p>\n<p>If you're a victim of such emotional abuse by controlling parents, you may take inspiration from this epic.</p>\n","fileName":"How Holi is related to narcissism and patriarchy.md"},{"title":"Effective Remote Communication","description":"My take on team communication in a remote world.","date":"2020-11-01T06:02:13.793Z","categories":"[]","keywords":["teams","remote work","productivity"],"slug":"effective-remote-communication-11-1-2020","isDraft":false,"image":"/img/blog/asynchronous-vs-synchronous.png","html":"<p>Thanks to COVID-19, working classes are either privileged to work remotely for their company, or severely unfortunate to lose their jobs and having to rebuild their careers from scratch. While the privilege of remote work is certainly a godsend, most companies, in my honest opinion, are struggling to make it work effectively. Here are some of my thoughts on how to improve that. I might be wrong or missing some points, would be more than happy to discuss about it on <a href=\"https://twitter.com/bogas04\">Twitter</a>!</p>\n<h2 id=\"asynchronous-communication\"><a href=\"#asynchronous-communication\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Asynchronous Communication</h2>\n<p>Pretty much all developers know how synchronous blocking code isn't really ideal, especially when multiple actors are involved. The same applies to a team of employees. If every problem requires another employee to stop what they're doing and help you out, it causes a pipeline stall. Because they've stalled what they were doing, dependents of their work would also be stalled. It isn't immediately obvious, but as the team scales without adopting asynchronous communication, productivity counter-intuitively decreases, despite the increase of workforce. In my opinion addition of new members doesn't also mean improvement of efficient communication amongst them.</p>\n<p><img src=\"/img/blog/asynchronous-vs-synchronous.png\" alt=\"Image comparing how synchronously processes stall the pipeline while asynchronous processes do not do so\"></p>\n<ul>\n<li>Make it easy for other person to reply quickly, for example:</li>\n<li>\n<ul>\n<li>A yes/no question can be answered faster than an ambiguous monologue.</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>Scheduling a meeting in advance (after checking their calendar) is better than asking \"are you free?\" and waiting for hours.</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>Sharing relevant details/attachments is better than waiting for them to ask you for that.</li>\n</ul>\n</li>\n<li>Sharing a deadline in your ask gives other person time to organize their week plans better.</li>\n<li>Expect delays in replies, that's the norm, not an exception.</li>\n<li>Keep some extra chores at hand while you wait for a reply, so as to not stay blocked until you receive one.</li>\n</ul>\n<h2 id=\"clear-articulate-communication\"><a href=\"#clear-articulate-communication\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Clear Articulate Communication</h2>\n<blockquote>\n<p>Effective written communication becomes critical the more companies embrace remote work. With an aversion to \"jumping on calls\" at a whim, and a preference for asynchronous communication, most of remote-friendly company's communications are text-based, and so articulate and timely articulation becomes key.</p>\n</blockquote>\n<p><a href=\"https://medium.com/swlh/the-five-levels-of-remote-work-and-why-youre-probably-at-level-2-ccaf05a25b9c\">Source</a></p>\n<p><img src=\"/img/blog/articulate-communication.png\" alt=\"Image comparing 3 examples of articulation. First: call the person directly to get answer, Second: &#x22;a-fairly-large-module isn&#x27;t working , can you join this meeting for 5 minutes?&#x22;, Third: &#x22;Hey, I got complete-error-message error when running code-snippet. I&#x27;ve tried attempts-to-fix and saw links-to-documentation, but I&#x27;m still stuck. Here&#x27;s my code branch if you want to checkout and debug.&#x22;>\"></p>\n<p>The next problem is that folks prefer to communicate as little as possible about their issue, while expect an immediate fix for their issue. Observe the three scenarios above. The first message is essentially a <a href=\"https://chelseatroy.com/2018/04/17/but-what-if-i-cannot-tap-my-remote-employee-on-the-shoulder/\">shoulder tap equivalent of office</a>. You completely break the flow of the other person, without being considerate about their time and their context switch. Please don't do this unless it's basically EMERGENT as well as URGENT. To understand the difference between the two, let's look at this quote:</p>\n<blockquote>\n<p>The main difference between emergency and urgency is that in emergency there is immediate threat to life, health, property or environment; whereas in urgency, there is no immediate danger or threat to life, health, property or environment but if not taken care in a given period of time, then the situation may turn into an emergency situation.</p>\n</blockquote>\n<p><a href=\"http://www.differencebetween.net/science/nature/difference-between-urgence-and-emergency/\">Source</a></p>\n<p>I hope we can all agree that first message should ONLY be reserved for emergencies. If we keep crying foul, like calling a person to help with an unreleased software or upcoming demo, what eventually happens is that employees lose seriousness and start skipping calls. This can be catastrophic when you really have an emergency, like a huge outage or critical crash that's costing millions of dollars.</p>\n<p>Now that we've established that the first message is basically reserved for emergencies, let's see why the second message isn't ideal either. The problem is that it's focused only in getting the solution, but with minimum effort. It's basically like asking someone to take over and fix your issue, i.e. <a href=\"https://theleegroup.com/spoon-fed-vs-supportive-management/\">spoon feeding</a>. This is detrimental in several ways;</p>\n<ul>\n<li>You don't actually go through the process of reading, debugging, trying, thinking, and learn less.</li>\n<li>You stop someone else from doing their work and making it difficult for them to resume after having disconnected the call.</li>\n<li>The person who you're asking help from has to ask you a bunch of questions which you could've written to avoid extra time spent on the problem. \"Did you try this? Did you read this? Can you share the error message? Can you share your branch?\", all this could've been avoided and saved everybody's time.</li>\n<li>It negatively effects the mood of the other person because deep down everyone wants to help each other, but they've to make a choice between being polite and slacking off in their job. That's a tough one and not everyone would be assertive enough to triage help.</li>\n<li>Chances are, by the time you read the error message, Google a bit, read documentation and try certain fixes, you might have found the fix.</li>\n</ul>\n<p>Even if you are using the third message format, take some time to type out the entire thing, and re-read it yourself once. Not only you'll avoid spamming, you'll also get an opportunity for some self-reflection. Sometimes you just need to see a gist of the whole thing for something to \"click\".</p>\n<h3 id=\"open-communication\"><a href=\"#open-communication\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Open Communication</h3>\n<p>Now that we understand importance of asynchronous and clear articulate communication, last thing that we need is open communication. There's no need to discuss in small silos when you know there are several of employees who might be facing the same issue, might have fixed it somehow and might have better ideas than the person you're taking help from. So asking for helping to your favorite goto person for xyz type of issue is only going to wear them out and give you less imaginative solutions. Discuss in open as much as possible, albeit in a clear articulate fashion, so as to enable meaningful discussion for systematic solutions.</p>\n<ul>\n<li>Try to discuss in channels &#x26; groups, not just DMs.</li>\n<li>Realize that asking questions in open doesn't reflect poorly on you.</li>\n<li>Fear of conflicting opinions is a <a href=\"https://www.entrepreneur.com/article/238993\">net negative for a team</a>.</li>\n<li>Sharing your progress timely with the concerned audience helps in avoiding working in isolation.</li>\n<li>Gathering continuous feedback from multiple people helps in adapting to changing requirements.</li>\n</ul>\n<p>I hope this post made some sense to you and encourages you to form <a href=\"https://www.careercontessa.com/advice/healthy-boundaries-at-work/\">boundaries</a> for your sanity and that of your team members. I'll highly recommend you to go through the links I've shared in this blog to learn more.</p>\n","fileName":"Effective Remote Communication.md"},{"title":"JavaScript cheat sheet in 2020","description":"List of snippets to learn basics of JavaScript","date":"2020-09-14T06:02:13.793Z","categories":"[]","keywords":["javascript","ecmascript","es2015"],"slug":"javascript-cheat-sheet-in-2020-9-14-2020","isDraft":false,"image":"/img/blog/ecmascript.png","html":"<p><img src=\"/img/blog/ecmascript.png\" alt=\"Evolution of ECMAScript\">\n<a href=\"https://engineering.carsguide.com.au/javascript-context-ecmascript-84d709ef9165\">Source</a></p>\n<h2 id=\"basic-javascript-syntax\"><a href=\"#basic-javascript-syntax\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Basic JavaScript syntax</h2>\n<p>If you want to learn from a book, this is a great one <a href=\"https://exploringjs.com/impatient-js/toc.html\">https://exploringjs.com/impatient-js/toc.html</a></p>\n<h3 id=\"variable-definition\"><a href=\"#variable-definition\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Variable definition</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"function-definition\"><a href=\"#function-definition\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Function definition</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// function definition</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// function as a variable</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// anonymous function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"strings\"><a href=\"#strings\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Strings</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"lo, wo\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"Hello\", \" world]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"H\"</span>\n\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"H\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, you!\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" world\" trims into \"world\"</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\". Sup?\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, world. Sup?\" (single quotes are also accepted)</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Template strings can interpolate variables</span>\n</code></pre></div>\n<h3 id=\"arrays\"><a href=\"#arrays\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Arrays</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello,\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token comment\">// 2</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello, world\"</span>\n\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"Hello,\"</span>\n\na<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"world\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"Hello,\", \"world\", \"!\"]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>e ⇒ e <span class=\"token operator\">===</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"!\"</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>e ⇒ e <span class=\"token operator\">===</span> <span class=\"token string\">\"definitely not in array\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sup?\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns new length of mutated array [\"Hello,\", \"world\", \"!\", \"Sup?\"]</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// removes last item</span>\n\nb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// removes  first item, shifts left, [\"world\", \"!\"]</span>\n\nb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// puts new item to beginning [\"Hello!\", \"world\", \"!\"]</span>\n\n<span class=\"token comment\">// destructuring</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// first is Hello\", second is \"world\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// first is 1, rest is [2, 3, 4]</span>\n\n<span class=\"token comment\">// spreading</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token comment\">// c is [1, 2, 3, 4]</span>\n\n</code></pre></div>\n<h3 id=\"objects\"><a href=\"#objects\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Objects</strong></h3>\n<p>JSON is first class citizen. The quotes around key aren't necessary.</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Human\"</span><span class=\"token punctuation\">,</span>\n\n  age<span class=\"token operator\">:</span> <span class=\"token number\">200000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">greet</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi! I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints \"Hi! I'm Human and I'm 200000 years old\"</span>\n<span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>o<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Human\"</span>\n\no<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 200000</span>\n\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">;</span>\n\no<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token comment\">// depending on condition it'll be \"Human\" or 200000</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token property-access\">newKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// o now has name, age and newKey</span>\n\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"name\", \"age\", \"newKey\"]</span>\n\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [[\"name\", \"Human\"], [\"age\", 200000], [\"newKey\", [1,2,3]]</span>\n\n<span class=\"token comment\">// destructuring</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span> <span class=\"token comment\">// name is Human</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  greet<span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>restOfObject\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span> <span class=\"token comment\">// greet is function, restOfObject is {name: \"Human\", age: 200000}</span>\n\n<span class=\"token comment\">// spreading</span>\n<span class=\"token keyword\">const</span> myNewPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>restOfObject<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">greet</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Yo! This is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> over here. Imma </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> year old!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// property shorthands</span>\n\n<span class=\"token keyword\">const</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">\"is khan\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> myName <span class=\"token punctuation\">}</span> <span class=\"token comment\">// same as { myName: myName }</span>\n</code></pre></div>\n<h3 id=\"conditional-constructs\"><a href=\"#conditional-constructs\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Conditional Constructs</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>condition2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ncondition <span class=\"token operator\">?</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> condition2 <span class=\"token operator\">?</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncondition <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// iff condition is truth-y, a would be executed</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// if result of a() is truth-y, b won't be executed</span>\n</code></pre></div>\n<h3 id=\"looping-constructs\"><a href=\"#looping-constructs\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Looping Constructs</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// for loop</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//while loo</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x3C;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// do-while</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">do</span> <span class=\"token punctuation\">{</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x3C;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for-in loop to loop through keys of an object</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// for-of loop to loop through values of an array</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"functional\"><a href=\"#functional\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Functional</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// loops through all items of arr array</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// loops through all items of arr array and returns modified array</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> modifiedItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns array with items where cond(value) is true</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns true if any item has cond(value) true</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns true if all items have cond(value) true</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// returns undefined or first item matching cond(value)</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"classes\"><a href=\"#classes\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Classes</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> variable <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">utilityMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Human\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">utilityMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">variable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Shorthand for instance variables</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// same as</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Difference between defining instance method and class method (class A#method)</span>\n<span class=\"token comment\">// is that instance methods are created for each instance</span>\n<span class=\"token comment\">// while class method reference is reused between all instances</span>\n<span class=\"token comment\">// so if you're dealing with a lot of instances of same class</span>\n<span class=\"token comment\">// method will be better memory-wise</span>\n</code></pre></div>\n<h3 id=\"asynchronous-code\"><a href=\"#asynchronous-code\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Asynchronous code</strong></h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Callbacks</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">executeAfterOneSecond</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">executeAfterOneSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// unlike blocking languages, setTimeout won't block execution</span>\n<span class=\"token comment\">// we'll see \"a\" and \"b\" after a second, even if we've b being executed before</span>\n\n<span class=\"token comment\">// Learn more about event loop: https://www.youtube.com/watch?v=8aGhZQkoFbQ</span>\n\n<span class=\"token comment\">// In this example we saw setTimeout accepting a function and so did executeAfterOneSecond</span>\n<span class=\"token comment\">// This makes it a higher order function, and fn is called a callback</span>\n<span class=\"token comment\">// as in, once you're done, call [me] back.</span>\n\n<span class=\"token comment\">// Promises</span>\n<span class=\"token comment\">// Imagine everything being executed via callbacks</span>\n<span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">convertToJson</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">transformData</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">callAnotherApi</span><span class=\"token punctuation\">(</span>apiUrl2<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">finalResult</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">notifyUser</span><span class=\"token punctuation\">(</span>finalResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// While this is good as our code doesn't block any user action like scrolling</span>\n<span class=\"token comment\">// it's hard to read and is usually referred to as \"Callback hell\"</span>\n\n<span class=\"token comment\">// Promises were designed to make this pyramid shape more flat</span>\n\n<span class=\"token comment\">// A promise is an instance of class Promise that has two main methods then &#x26; catch</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callApi</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">apiUrl</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">lowLevelFunctionToCallNetwork</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">else</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>convertToJson<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>transformData<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">callAnotheApi</span><span class=\"token punctuation\">(</span>apiUrl2<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>notifyUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Async/await makes it even more easier</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span>apiUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> finalResult <span class=\"token operator\">=</span>  <span class=\"token function\">callAnotherApi</span><span class=\"token punctuation\">(</span>apiUrl2<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">notifyUser</span><span class=\"token punctuation\">(</span>finalResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"module-system\"><a href=\"#module-system\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a><strong>Module system</strong></h3>\n<p>In my opinion, frontend code grows much faster than backend code. Not only you deal with calling various APIs and data transformation techniques, you also bind all that to UI, while taking care of navigation, animations, performance, accessibility and so on.</p>\n<p>Without the ability of converting code snippets into tiny reusable modules, you'll end up in a great spaghetti code with business logic, API logic, performance optimizations, UI, animations etc. all in one file.</p>\n<p>Let's first cover imports</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// assuming \"react\" is in package.json's dependencies</span>\n<span class=\"token comment\">// present in &#x3C;root>/node_modules</span>\n\n<span class=\"token comment\">// imports only the the default export.</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// imports all the named and default export as React.</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// you can change the name as you find fit</span>\n<span class=\"token comment\">// note: in case of React you really need to name it React for JSX transpilation</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ICanChangeTheNameToAnything</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// you can destructure from modules</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// you can rename a destructured value from a module using `as` keyword.</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">ReactComponent</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for local imports, you need to give relative path (in context of current file)</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> mypackage</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./my-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// All import paths have to be statically known, so you can't put a variable in there.</span>\n</code></pre></div>\n<p>Now that we know how to import, let's focus on exports</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// imported as import {a} from './my-package';</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// imported as import {print} from \"./my-package\";</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// imported as import { b, c, d } from \"./my-package\";</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// imported as import a from \"./my-package\";</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token operator\">*</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./some-other-package\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exports evertyhing in some-other-package</span>\n</code></pre></div>\n","fileName":"JavaScript cheatsheet in 2020.md"},{"title":"Learning ReactJS in 2020","description":"My take on introducing you to ReactJS","date":"2020-09-14T06:02:13.793Z","categories":"[]","keywords":["react","react-native","react-native-web"],"slug":"learning-reactjs-in-2020-9-14-2020","isDraft":false,"image":"/img/blog/reactjs.png","html":"<p><strong>Prerequisites</strong>: Working knowledge of JavaScript, ES6 features (classes, arrow functions at least). Here's a <a href=\"/blog/javascript-cheat-sheet-in-2020-9-14-2020\">cheatsheet</a> for same.</p>\n<p><img src=\"/img/blog/reactjs.png\" alt=\"ReactJS Logo\">\nScreenshot of official <a href=\"https://reactjs.org\">ReactJS</a> website.</p>\n<h2 id=\"why-do-we-even-need-react\"><a href=\"#why-do-we-even-need-react\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Why do we even need React?</h2>\n<ul>\n<li>Every frontend application deals with calling APIs, transforming data, listening to user's actions (click, key presses) and updating UI accordingly.</li>\n<li>As you have more and more interactable/dynamic elements in your UI, keeping a reference of each element and manually changing it whenever data (let's call it state of application) changes can be cumbersome. It can also be hard to remember to update all elements that are related to one particular state variable.</li>\n<li>Let's take example of an app like Swiggy. When I click on add item, see how many elements update, and how many calculations are going on.</li>\n</ul>\n<p><video loop autoplay controls muted src=\"/video/blog/swiggy-add-to-cart.mp4\"></video></p>\n<ul>\n<li>Not just that, there are a lot of edge cases that have to be handled. Observe what happens when I try to add item from other restaurant.</li>\n</ul>\n<p><video loop autoplay controls muted src=\"/video/blog/swiggy-add-to-cart-edge-case.mp4\"></video></p>\n<ul>\n<li>Clearly manually updating each state variable and element is invitation to a messy codebase. And we've not yet seen how hard it can be to update UI code.</li>\n<li>For something as simple as updating text of any element, we've to do the following. Imagine having id's all over your HTML code and writing code to manually mutate every single field, each time one state variable changes.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// pseudo-ish code, just to illustrate how one might tackle the problem</span>\n<span class=\"token comment\">// with imperative procedural approach</span>\n\n<span class=\"token keyword\">const</span> addToCart <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add-to-cart\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naddToCart<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getCartRestaurant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token function\">getCurrentRestaurant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showPopup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> itemDetails <span class=\"token operator\">=</span> itemStore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>addToCart<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">itemId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">cartExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addCartToUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// series of commands to build up cart UI</span>\n    <span class=\"token function\">addItemToCartUI</span><span class=\"token punctuation\">(</span>itemDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// series of commands to update cart UI with new itemDetails</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addItemToCartUI</span><span class=\"token punctuation\">(</span>itemDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>This is where React comes handy by abstracting the imperative commands in a declarative API, while also making it reactive to state changes. So whenever our state changes, React will take care of updating the UI as defined by our code.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">addItemToCartState</span><span class=\"token punctuation\">(</span>itemDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  cartExists <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Cart</span></span> <span class=\"token attr-name\">items</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cart<span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  cartExists <span class=\"token operator\">&#x26;&#x26;</span> currentRestaurant <span class=\"token operator\">!==</span> cart<span class=\"token punctuation\">.</span><span class=\"token property-access\">restaurant</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Popup</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>React takes care of rendering to UI, we just need to make update cart state, the components would react to it naturally. By making reusable components like Cart and Popup, you don't have to duplicate code each time you want to construct UI and behavior around it. Components can naturally compose making it really easy to write code.</li>\n<li>React Native is another platform that uses React in its core. All fundamentals of React are ditto same in React Native, with only differences in some APIs and core components provided. The value proposition of React Native is that unlike native apps, you can use single codebase for iOS, Android and Web, while also bypassing App store/Play store for releasing non-native changes (all UI &#x26; business logic majorly). We'll discuss this point later.</li>\n</ul>\n<h2 id=\"jsx---the-language-of-react\"><a href=\"#jsx---the-language-of-react\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>JSX - The language of React</h2>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Person</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// is transpiled into</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Person</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> style<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Before we understand React, we must first take time to understand JSX, the way you describe UI in React Applications. JSX is basically an extension to JavaScript to add support for XML like syntax. While JSX isn't necessary, it does make it much more easy to write code. React's philosophy deviates from traditional template based frameworks (Angular, Vue, Svelte) in the sense that it doesn't mix programming constructs into the template, but rather mixes HTML into JavaScript itself.</p>\n<p>This makes writing UI code familiar to HTML, while also having access to entire JavaScript syntax. This IMO reduces a lot of boilerplate and template specific knowledge.</p>\n<p>Note: A tool like babel or typescript can be used to do this transformation. Note, as it is JSX won't run on browser, it needs to be converted to JavaScript, hence the need of a build tool.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">isActive</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// is transpiled into</span>\n<span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">MyComponent</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">isActive</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// is loosely transpiled into</span>\n<span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">MyComponent</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"a-react-component\"><a href=\"#a-react-component\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>A React component</h2>\n<p>Now that we know how to express UI in a React app efficiently (code readability wise), we can look into an actual React component now.</p>\n<p>There are 3 primary parts to a React component. It can have internal state, it can listen to props sent by its parent component, and it can return a sub-tree of UI expressed as JSX.</p>\n<p>There are two paradigms you can follow to make a React Component.</p>\n<ul>\n<li>\n<p>Class based components</p>\n<blockquote>\n<p>Any class that extends either of <code>React.Component</code> and implements at a bare minimum render method that returns JSX, is a class based component.</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// basic example</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>\n<p>Functional components</p>\n<blockquote>\n<p>Any function that returns JSX is a functional component.</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// basic example</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// smoller plz</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">MyComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// i sed smolllllll</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">MyComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As you can see, functional component seem to be quite simple in their definition. Each component can accept props and can have an internal state. But how do these access props and state?</p>\n<h3 id=\"props\"><a href=\"#props\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Props</h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// functional component</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// class based component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"state\"><a href=\"#state\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>State</h3>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// functional component</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// class based component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// smoller plz</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>There's fundamental difference in idea of state in a class component and functional component. In a class component, entire state is part of <code>this.state</code> and each state variable would be a key of it. While in functional component, each state variable is created individually by virtue of <code>useState</code>, a magical-looking function that somehow remembers current state value between renders, and can differentiate one from another. You can also see how state is tightly coupled to the class (it's directly inside the constructor), while in case of function, it is yet another function call. If say you had 3 state variables, you can group 3 <code>useState</code>s in one function call and use it. This isn't quite intuitively obvious when we see class based components.</p>\n<p>Originally, we only had class based components as the only viable option as only they supported state and other features. However, React introduced concept of <a href=\"http://reactjs.org/hooks\">hooks</a> (such as <code>useState</code>), that gives a lot of flexibility to functional components making them not only on-par but actually superior in terms of code re-usability and agility.</p>\n<p>Since it's much simpler to understand functional components, we'll go through them first so that you can contribute ASAP. When we discuss lifecycle methods, we'll learn more about the differences.</p>\n<iframe src=\"https://codesandbox.io/embed/stoic-ptolemy-n2h8r?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"stoic-ptolemy-n2h8r\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<h3 id=\"lifecycles-and-side-effects\"><a href=\"#lifecycles-and-side-effects\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Lifecycles and Side-effects</h3>\n<p>Having access to state and props is very powerful to create dynamic UIs. However, you also need to know about the lifecycle of a component. You may want to call an API as soon as the UI is visible to user. Or may want to cancel a polling request as soon as the component is removed from current tree of components. You may want to know when a <code>query</code> prop has been updated by a parent of a <code>&#x3C;Search query={userQuery} /></code> component, to fetch new results based on updated <code>query</code>. All these are side effects of component's life cycle. Perform this side effect when some event occurs (component loads, state changes, prop changes, component unloads to name a few).</p>\n<p>Let's see how to listen to these events in class based components first.</p>\n<h3 id=\"class-based-components\"><a href=\"#class-based-components\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Class Based Components</h3>\n<h4 id=\"when-a-component-loads\"><a href=\"#when-a-component-loads\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>When a component loads</h4>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// perform on load side effects</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"Loading...\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"when-a-component-is-removed-from-tree\"><a href=\"#when-a-component-is-removed-from-tree\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>When a component is removed from tree</h4>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> timer<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// update state.timer every 1000 ms</span>\n  <span class=\"token function-variable function\">poll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldState</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> timer<span class=\"token operator\">:</span> oldState<span class=\"token punctuation\">.</span><span class=\"token property-access\">timer</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">timer</span> <span class=\"token operator\">=</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">timer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">timer</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"when-a-prop-is-updated\"><a href=\"#when-a-prop-is-updated\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>When a prop is updated</h4>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>results<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetchNewResultsAndUpdateState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// query updated</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetchNewResultsAndUpdateState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>results<span class=\"token punctuation\">,</span>loading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"Getting your results...\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">SearchResult</span></span> <span class=\"token attr-name\">result</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function-variable function\">fetchNewResultsAndUpdateState</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">query</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>results<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>There are several more lifecycle methods provided by React.Component, but I think these 3 are enough for you to build highly dynamic UIs that are memory safe. They're quite powerful and let you know achieve a lot of complex interactions.</p>\n<p>However, remember I told how class based components are tightly coupled to the business logic and are hence quite verbose?</p>\n<ul>\n<li>Logic to call API whenever a component loads seems to be a generic problem, but due to the way React classes are designed, it's hard to abstract this out in a neat way. There are several advanced patterns like Render Props and Higher Order Functions to mitigate that. Each time you want to call an API on load of a component, you've to write this logic in one way or another.</li>\n<li>Since we can define <code>componentDidMount</code>, <code>componentDidUpdate</code> and <code>componentWillUnmount</code> only once, they'll keep the logic to call APIs, unsubscribe from intervals and subscriptions, clean up other resources in a one huge block. We can't really abstract it out as they're all interdependent. In our timer example, we need to rely on <code>componentDidMount</code> to set <code>this.timer</code> so that we can clear it in <code>componentWillUnmount</code>.</li>\n<li>The logic to check which prop has been updated can quickly become a mess if you've to listen to changes on multiple props. What we really want to do is \"whenever props.query changes, do this\" but what we're actually doing is \"whenever component updates, check if it updated due to change in query, if that's the case, do this\". Also, since <code>componentDidUpdate</code> isn't fired when component is loaded, we need to perform the call in <code>componentDidMount</code> as well.</li>\n</ul>\n<h3 id=\"functional-components\"><a href=\"#functional-components\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Functional Components</h3>\n<p>Now that we've seen the power of lifecycle methods, let's see how functional components achieve that with basically making use <code>useEffect</code>. As you can imagine, <code>useEffect</code> seems to be a hook doing a lot of heavy lifting, so let's spend some time understanding it before going through above use cases.</p>\n<p>Let's first see the signature of <code>useEffect</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// a function returning nothing</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CleanupType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a function returning a CleanupType function</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CallbackType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">CleanupType</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// accepts CallbackType function and Dependency array, returns nothing</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UseEffectType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">CallbackType</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Dependency</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In above example, we are basically asking react to <code>doSomething</code> whenever <code>a</code> changes (dependency list tells react to listen to changes on that variable). And whenever <code>a</code> transitions from one value to another, before considering the new value, call <code>doSomethingElse</code>. This can be seen as an opportunity to do cleanup. Clear polling functions, unsubscribing event listeners, saving some state to storage etc.</p>\n<p>An empty dependency list would imply whenever the component that has invoked this hook mounted and unmounted. If you omit the dependency list altogether, then you're essentially telling React to run your code on each render. You almost never want this.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// is loosely same as</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We can already see how the hooks aren't tied to the functional component that is invoking them, and that we can have multiple number of <code>useEffect</code>s, just like <code>useState</code>. Lastly, it's just a function call, and multiple such <code>useState</code> and <code>useEffect</code> s could be hidden beneath one <code>useComplexStuff</code> hook call.</p>\n<p>Let's go through the use-cases mentioned above but using functional components now.</p>\n<h4 id=\"when-a-component-loads-1\"><a href=\"#when-a-component-loads-1\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>When a component loads</h4>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// unlike class components, each state variable is individually stored</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"Loading...\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Please go through it and let me know if you've any questions. Try to absorb this API.</p>\n<p>Now let's see if we can truly abstract out this logic to call API on component load.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// so smoll. much nice.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Loading...\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// but how do we implement useUser?</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// this is the only extra line i've added to previous code.</span>\n  <span class=\"token comment\">// It's basically copy paste refactoring</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"when-a-component-is-removed-from-tree-1\"><a href=\"#when-a-component-is-removed-from-tree-1\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>When a component is removed from tree</h4>\n<p>Remember how I said <code>componentWillUnmount</code> depends on variables set by <code>componentDidMount</code>. Well, in case of <code>useEffect</code> the cleanup function has access to all variables created by the effect part of the function. So that's convenient.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>timer<span class=\"token punctuation\">,</span> setTimer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>timer<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And again, we can abstract this into a <code>useInterval</code> hook. These custom hooks are called, yup, custom hooks. Prefix them with a <code>use</code> so that it plays nicely with <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">eslint-plugin-react-hooks</a>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">useTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>timer<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTimer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>timer<span class=\"token punctuation\">,</span> setTimer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> timer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>I hope you're now convinced that hooks are really powerful and highly composable. Let's see the final use case now.</p>\n<h4 id=\"when-a-prop-is-updated-1\"><a href=\"#when-a-prop-is-updated-1\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>When a prop is updated</h4>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>results<span class=\"token punctuation\">,</span> setResults<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setResults</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Getting your results...\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">SearchResult</span></span> <span class=\"token attr-name\">result</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>You can see how just with one <code>useEffect</code> we can handle both mounting and updating stages. This makes our code less verbose and more declarative. Unlike class example, we're really asking react to get results whenever query updates.</p>\n<p>You might have observed how I've not used <code>async/await</code> syntax within a <code>useEffect</code> yet. It's because the <code>CallbackType</code> isn't an <code>async</code> function and it's expecting a callback in return, not a promise. If you really want to use async await syntax, you should try doing this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchResults</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setResults</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now that we've seen enough hooks code, I think it's time to go through the <em><a href=\"https://reactjs.org/docs/hooks-rules.html\">Rules of Hooks</a>.</em> Yes, they seem to be magical, but there are some rules that we need to follow to ensure React doesn't end up minimizing into a point of singularity and breaking the universe as we know it.</p>\n<ol>\n<li>Hooks must be only called from a React Functional Component or a custom hook.\nYou can't use it in a normal business logic function, or a class based component.</li>\n<li>Hooks must be at top level of wherever it's being called from.\nBasically, you can't use a hook inside a condition or loop.</li>\n</ol>\n<p>Go through the <a href=\"https://reactjs.org/docs/hooks-rules.html#explanation\">documentation</a> to understand more about this.</p>\n<h3 id=\"styling\"><a href=\"#styling\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Styling</h3>\n<p>So far you might have this <code>style</code> prop used on various components with an object with style related values in it.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> marginRight<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>These are actually CSS style <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#Keyword_index\">rules</a> that React accepts for base components. Rules that have a hyphen are camel cased. So <code>margin-right</code> becomes <code>marginRight</code>. Also, you can pass numbers wherever applicable, <code>px</code> unit would be taken for those. So <code>marginRight: 10</code> is same as <code>margin-right: 10px;</code></p>\n<p><strong>Note:</strong> Unlike CSS you can't define <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">pseudo classes</a> like <code>:hover</code> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\">pseudo elements</a> like <code>::after</code>. You can achieve that by defining a CSS class outside of React and using it as <code>className</code> or using CSS-in-JS libraries like <a href=\"https://styled-components.com/\">styled-components</a>.</p>\n<h2 id=\"react-native\"><a href=\"#react-native\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>React Native</h2>\n<p>Now that we've covered most of the basic fundamentals of ReactJS, let's see how <a href=\"https://reactnative.dev/\">React Native</a> is different. In all our above examples, we're actually using ReactJS along with <a href=\"https://reactjs.org/docs/react-dom.html\">ReactDOM</a>. It's the driver that knows what to do when we write a heading like follows.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>It converts the <code>h1</code> to respective HTML <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a> element, and applies the styling to it. So we can see that ReactJS (class components, state, lifecycle, props, composability, hooks etc.) is actually host platform agnostic. It can run on any platform as long as you provide a driver for the same. On Native platforms, <a href=\"https://reactnative.dev/\">react-native</a> does that. You can image that we can't use <code>h1</code> and the like on native as they don't understand HTML. Instead, we've things like <code>TextView</code> on Android and <code>UITextView</code> on iOS and so on for all native UI elements. The driver takes care of mapping a <code>&#x3C;View style={{backgroundColor: 'red'}}>&#x3C;/View></code> into a <code>UIView</code> object with background property set as \"red\" for iOS, likewise for Android.</p>\n<p><img src=\"https://reactnative.dev/docs/assets/diagram_ios-android-views.svg\" alt=\"https://reactnative.dev/docs/assets/diagram_ios-android-views.svg\"></p>\n<p>So apart from using components like <code>View</code> <code>Text</code> <code>TextInput</code> <code>Image</code> etc in place of <code>div</code> <code>span</code> <code>input</code> <code>img</code> (respectively), the fundamentals remain the same. There's one more difference however, and that is styling:</p>\n<ul>\n<li>Just like native platforms don't understand HTML, they don't understand CSS either. Authors of React Native made <a href=\"https://yogalayout.com/docs\">Yoga</a> a <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox\">flexbox</a> implementation along with a CSS rule subset to native styling translation layer for native platforms.</li>\n<li>Another thing is that unlike HTML where you can basically create any sort of hierarchy of elements, even if it doesn't make sense, React Native is more strict. Strings are only accepted by <code>&#x3C;Text/></code> and you can't place strings inside a <code>&#x3C;View /></code>, similarly rules around text (color, fontSize etc) don't have any effect on a <code>&#x3C;View /></code>. You need to assign it to the <code>&#x3C;Text /></code> directly.</li>\n<li>Also the API of <code>style</code> prop is slightly different. We'll cover it next.</li>\n</ul>\n<h3 id=\"react-native-styling\"><a href=\"#react-native-styling\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>React Native Styling</h3>\n<p>Unlike <a href=\"https://reactjs.org/docs/react-dom.html\">react-dom</a>, <code>style</code> prop is slightly different in the sense that it also accepts an array. It can also accept object created by <code>StyleSheet.create</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// react-dom</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>margin<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">// react-native</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">View</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>margin<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// or</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">View</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>margin<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">StyleSheet</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>margin<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">View</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<h3 id=\"react-native-web\"><a href=\"#react-native-web\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>React Native Web</h3>\n<p>We've come full circle with <a href=\"https://necolas.github.io/react-native-web/docs/?path=/docs/overview-getting-started--page\">React Native Web</a>, which is basically a component library that has same API as <code>react-native</code> but is implemented with <code>react-dom</code> in mind. A view in <code>react-native-web</code> is essentially a <code>&#x3C;div /></code> . This might seem futile, however the power is that you can now write your code in React Native, and use it on web using <code>react-native-web</code>.</p>\n<h2 id=\"advanced-patterns\"><a href=\"#advanced-patterns\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Advanced Patterns</h2>\n<p>These are now not as important with advent of hooks, however it's still important once in a while in your daily job. You can ignore these for now and comeback later whenever you encounter one.</p>\n<h3 id=\"higher-order-components\"><a href=\"#higher-order-components\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Higher Order Components</h3>\n<p>Just like Higher Order Functions can accept a function and return a new one, High Order Components are functions that accept a component and return a new one. This can be used as a way to decorate a particular component with extra behavior.</p>\n<p>Suppose we want to show a loader if <code>loading</code> prop is true, but we don't want to write this code for all components. We can create a <code>withLoader</code> higher order component to solve this.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withLoader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">LoaderContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Loader</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now we can wrap our components with <code>withLoader</code> whenever we want to add this behavior.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// UserPage.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserPage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withLoader</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">UserPage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Home.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Home</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserPage</span></span> <span class=\"token attr-name\">loading</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Multiple such HOCs can be used to add behavior. <a href=\"https://react-redux.js.org/api/connect\">react-redux</a> actually exposes one popular HOC <code>connect</code> that lets you connect to the <a href=\"https://redux.js.org/\">redux</a> store.</p>\n<p>There are some caveats though:</p>\n<ul>\n<li>Our React tree will now have a <code>LoaderContainer</code> above each component using this HOC.</li>\n<li>We can't add this behavior dynamically or conditionally, at build time we make the choice either to wrap a component in an HOC or not.</li>\n<li>Passing a <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">ref</a> won't give us <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">ref</a> of our <code>Component</code>, but rather of <code>LoaderContainer</code>. To mitigate this most developers usually manually connect a <code>innerRef</code> prop to the inner component.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withLoader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">LoaderContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> innerRef<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Loader</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>innerRef<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>The static fields on the component won't be accessible from the enhanced component. Suppose <code>UserPage</code> has a <code>MODES</code> field so that you can choose which mode of <code>UserPage</code> you want to render. To mitigate this, you can <a href=\"https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\">hoist</a> the <a href=\"https://github.com/mridgway/hoist-non-react-statics\">non-react statics</a>.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// UserPage.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserPage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n  <span class=\"token keyword\">static</span> <span class=\"token constant\">MODES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">LITE</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NORMAL</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withLoader</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">UserPage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Home.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Home</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ❌ Won't work as withLoader doesn't expose the MODES static field.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserPage</span></span> <span class=\"token attr-name\">mode</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserPage</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MODES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LITE</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">loading</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"render-props\"><a href=\"#render-props\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Render props</h3>\n<p>While HOCs are highly powerful, they have a lot of caveats that Render Props attempt to solve. Render props are just a fancy name given to a pattern in which makes use of the fact that <code>children</code> field (or any prop for that matter) of a component can actually be a function. Using this, we can put behavior in our Render Prop accepting Component and use it like any other React Component. This is in a way inversion of control, where you decide what you want to render. For an example, let's modify the first class based example of loading data on component load. This helps us extract the behavior out of our initial example and lets us reuse that logic wherever we want.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDataFetcher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">children</span><span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserDataFetcher</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">loading<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserPage</span></span> <span class=\"token attr-name\">loading</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span><span class=\"token class-name\">WithUserData</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">}</span>\n</code></pre></div>\n<p>I guess you can see why this was so powerful in pre-hooks era.</p>\n<h2 id=\"optimizations\"><a href=\"#optimizations\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Optimizations</h2>\n<p>While React's internal architecture ensures app performance stays top-notch, there are some optimizations we can use to reduce load on user's system by avoiding large re-renders. See, each time reference of state or props of a component changes, React would re-render the component. This is how we achieve reactivity. However, React by default will make no checks and assumptions to see if the update prop or state is actually same as before.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Library</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Whenever <code>count</code> state variable updates in <code>MyComponent</code>, <code>MyComponent</code> would re-render. And since it re-renders, it'll cause <code>Library</code> to re-render as well. React wouldn't check if version has actually changed or not. If you wish to avoid a re-render of <code>Library</code>, you can use <code>React.memo</code></p>\n<h3 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>React.memo</h3>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>React.memo</code> will see if props passed to a functional component have been updated or not. It loops through all the keys in previous props and next props, and sees if they're referential-ly equal to each other. It accepts a second argument as well to explicit perform this check.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">version</span> <span class=\"token operator\">===</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">version</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here we are telling <code>React.memo</code> that consider props to be equal if the 2nd argument returns <code>true</code>. So the function is anwering the question <code>are props the same?</code></p>\n<p>One thing to note is that <code>React.memo</code> checks for reference updates and not value update. The \"reference\" to any variable may change even though the \"value\" remains same.</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the above code, by virtue of re-assignment, we've caused the reference of <code>a</code> to change, even though the value is identical. React doesn't care for the value, but the reference. This is why we can't mutate variables as React wouldn't be able to tell whether it has been updated or not. And such reassignments can happen a lot of times! Let's consider the following example now.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> libraryData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>libraryData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Library</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Just like before, whenever the <code>count</code> state variable updates, <code>MyComponent</code> would re-render, due to which <code>Library</code> would re-render too. Even if we apply <code>React.memo</code> like before, it wouldn't help in this particular case.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> libraryData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>libraryData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ❌ Wouldn't work as reference of libraryData changes on each render</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The reason for this is that we've passed an object literal, which would be created each time <code>MyComponent</code> updates. Same is true for functions that are created in-line.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ❌ Wouldn't work as reference of onClick changes on each render</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> version<span class=\"token punctuation\">,</span> onClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Each time <code>MyComponent</code> updates, a new function is created for <code>onClick</code> prop of <code>Library</code>. This can be fixed by some of the following techniques:</p>\n<ol>\n<li>Moving the said object/function outside of render of <code>MyComponent</code></li>\n<li>Somehow memozing the value between renders.</li>\n<li>Updating the checks performed by <code>React.memo</code> to compare the value and not just reference.</li>\n</ol>\n<p>For the first method, we can just move the object to global scope. This way the reference never changes.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> libraryData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>libraryData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ Works as reference of libraryData doesn't change</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"usememo--usecallback\"><a href=\"#usememo--usecallback\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>useMemo &#x26; useCallback</h4>\n<p>Or you could update the way <code>Library</code> accepts version. Notice how earlier we were simply passing version as a prop instead of keeping it inside a data prop. Since reference to strings &#x26; numbers don't change, our usage of <code>React.memo</code> would work as expected. The insight here is that you can design the way your component accepts props to avoid such pit-falls of referential equality checks. But this might not work always as your data needs might be different.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ Works as reference of strings doesn't change</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Second method can help in that case. To memoize the value, in functional components we can use advanced hooks like <code>React.useMemo</code> &#x26; <code>React.useCallback</code>. Suppose we really need to pass <code>version</code> as a data object. We can ask React to memoize it between renders using <code>useMemo</code>. The second argument is a dependency array, just like <code>useEffect</code>. So here we are telling React to recompute <code>libraryData</code> whenver any item in the array passed as second argument changes. Empty array implies on component mount. So this way we can preserve the reference to <code>libraryData</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> libraryData <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>libraryData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ Works as reference of libraryData is now memoized.</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>useCallback</code> is similar to <code>useMemo</code>, just that it returns a callable function instead. We can use this for functions.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ Works as reference of onClick is now memoized.</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> version<span class=\"token punctuation\">,</span> onClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In fact, you can implement <code>useCallback</code> using <code>useMemo</code> as the latter works for any type of value.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> dependencyArray</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> fn<span class=\"token punctuation\">,</span> dependencyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The last method is to just change the way <code>React.memo</code> performs the check. Though this can go pretty nasty as the number of props increase and nesting of the keys increase. And there's no neat way to do it for functions.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> libraryData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>libraryData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ Works as we're now comparing individual key of object</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Library</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">version</span> <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">version</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>NOTE:</strong> These are advanced optimizations and you should use them only if you've an actual performance regression. More often than not, the extra work done in these optimizations might give very little gains with the cost of code complexity and potential to introduce bugs. Each memoization technique described here requries extra computation (<code>React.memo</code> loops throught all props and checks their reference change), memory usage (To memoize is to store data) between renders, so the benefit would only come if the value you're trying to memozie is too expensive to calculate (some highly complicated data manipulation on an array of 1000 items) or the component you're planning to prevent re-renders for has a complicated deeply nested UI to render. In above cases it makes no sense as <code>&#x3C;h1 /></code> is fairly simple component and <code>libraryData</code> is a very small object. So unless you have a performance problem caused by re-renders, you shouldn't wrap variables in <code>useMemo</code> and components in <code>React.memo</code></p>\n<h3 id=\"reactpurecomponent\"><a href=\"#reactpurecomponent\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>React.PureComponent</h3>\n<p><code>React.memo</code> and the hooks like <code>useMemo</code> and <code>useCallback</code> only work for functional components. What about class components?</p>\n<p>Let's first take our above example to a class-y world.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> libraryData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>libraryData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Library</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Class based components have access to a life cycle method <code>shouldComponentUpdate</code>. We can guess from the name that it's similar to the second argument of <code>React.memo</code> above.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> libraryData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>libraryData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Library</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">version</span> <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">version</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>It's different in two ways than <code>React.memo</code>. Firstly, it has access to <code>nextState</code> so we can add checks for state changes. This can be helpful if a key in <code>this.state</code> is an object or function and you can't determine whether a state update is needed whenever you set it. Secondly, it is expecting answer to <code>should component update?</code> and not <code>are props the same?</code>. Other than that it's pretty much the same. You can imagine writing it by hand and having a dozen of checks for a large component can be tedious and error-prone. If only we had a default behaviour of <code>React.memo</code> for classes. Enter <code>React.PureComponent</code></p>\n<p>Just like <code>React.Component</code>, <code>React.PureComponent</code> is another class you can extend from to create your component. It behaves just like a regular component, but has a <code>shouldComponentUpdate</code> lifecycle method implemented for you.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ Works as reference of this.props.version doesn't change as it's a string</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Library</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">PureComponent</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>And just like <code>React.memo</code> it would fail if the said prop is an object or function that updates in each render. However, we don't really have a simple way to memoize these variables like <code>useMemo</code>. You can instead define a class property to move it out of scope render method.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  libraryData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> version<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Library</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">libraryData</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Library</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> version <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">The library version is </span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>NOTE:</strong> Writing <code>shouldComponentUpdate</code> by hand can cause more harm if a bug in logic prevents component from re-rendering. Relying on <code>PureComponent</code> is preferred, however if the component is simple, a re-render might be as good as comparison checks before render.</p>\n","fileName":"Learning ReactJS in 2020.md"},{"title":"My macOS setup","description":"Stuff I do while setting up a new mac","date":"2020-04-03T07:55:58.095Z","categories":"[]","keywords":["software","macos"],"slug":"my-macos-setup-4-3-2020","isDraft":false,"image":"/img/blog/macos.jpg","html":"<p><img src=\"/img/blog/macos.jpg\" alt=\"Picture of a macbook\"></p>\n<h2 id=\"preferences\"><a href=\"#preferences\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Preferences</h2>\n<p>I dislike macOS's fullscreen mode, so in order to get maximum screen real estate, I autohide menu bar and dock.</p>\n<h3 id=\"autohide-menu-bar\"><a href=\"#autohide-menu-bar\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Autohide menu bar</h3>\n<p>Refer to <a href=\"https://www.cnet.com/how-to/how-to-hide-the-menu-bar-in-os-x-el-capitan/\">this</a> article.</p>\n<p><img src=\"https://cnet2.cbsistatic.com/img/RQSE25g_jYlO_HOi_cgFHsoxtvc=/770x578/2015/07/17/ae679c9d-f02d-4656-8d6f-d909c0b4d43e/el-capitan-hide-menu-bar-setting-edit.jpg\" alt=\"Screenshot explaining how to turn autohide on\"></p>\n<h3 id=\"autohide-dock--disable-recent-applications\"><a href=\"#autohide-dock--disable-recent-applications\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Autohide dock &#x26; disable recent applications</h3>\n<p>I also like a clean setup, so I keep only essential items in the dock for quick access, for rest I use spotlight.</p>\n<p>Refer to <a href=\"https://www.cnet.com/how-to/macos-mojave-shows-recent-apps-in-the-dock-heres-how-to-hide-them/\">this</a> article.</p>\n<p><img src=\"https://cnet4.cbsistatic.com/img/AMTFPky98yMg5ihkaVH7-IzaHkk=/2018/07/13/ee1b1337-a22c-4aed-a4c9-ab291868faae/mojave-show-recent-apps-in-dock.png\" alt=\"Screenshot explaining how to autohide dock and recent apps\"></p>\n<h2 id=\"keyboard-stuff\"><a href=\"#keyboard-stuff\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Keyboard stuff</h2>\n<ul>\n<li>Disable <code>cmd+option+space</code> for spotlight history (System Preferences -> Spotlight -> Keyboard Shortcuts)</li>\n</ul>\n<p>Spotlight history is of no good use really, and that key combination can be utilized for a better purpose that we'll talk about later.</p>\n<p><img src=\"/img/blog/spotlight-history.png\" alt=\"Screenshot of spotlight keyboard settings\"></p>\n<ul>\n<li>Use Caps lock as Escape (System Preferences -> Keyboard -> Modifier Keys)</li>\n</ul>\n<p>As a vim user, I'm used to keeping Caps Lock as Escape key.</p>\n<p><img src=\"/img/blog/caps-escape.png\" alt=\"Screenshot of capslock modifier\"></p>\n<ul>\n<li>Turn on key repeating</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Open Terminal.app and past the following command.</span>\ndefaults <span class=\"token function\">write</span> -g ApplePressAndHoldEnabled -bool <span class=\"token boolean\">false</span>\n</code></pre></div>\n<p>I don't know why this isn't the default behaviour. I don't have much use for macOS's character suggestions on holding a key.</p>\n<h2 id=\"trackpad-stuff\"><a href=\"#trackpad-stuff\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Trackpad stuff</h2>\n<h3 id=\"enable-tap-to-click-system-preferences---trackpad\"><a href=\"#enable-tap-to-click-system-preferences---trackpad\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Enable tap to click (System Preferences -> Trackpad)</h3>\n<p>I prefer tap over physical clicks.</p>\n<h3 id=\"increase-cursor-size-system-preferences---accessibility---display\"><a href=\"#increase-cursor-size-system-preferences---accessibility---display\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Increase cursor size (System Preferences -> Accessibility -> Display)</h3>\n<p>A big cursor is easier to find and makes things easy to move around.</p>\n<ul>\n<li>Enable dragging with three fingers (System Preferences -> Accessibility -> Trackpad -> Trackpad Options)</li>\n<li>Click and hold is worse experience in my opinion.</li>\n</ul>\n<h2 id=\"application-stuff\"><a href=\"#application-stuff\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Application stuff</h2>\n<h3 id=\"configure-spotlight-to-not-index-a-lot-of-stuff\"><a href=\"#configure-spotlight-to-not-index-a-lot-of-stuff\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Configure spotlight to not index a lot of stuff.</h3>\n<p>In my setup, I don't need use spotlight to open files, so indexing them (<em>cough</em> <code>node_modules</code> <em>cough</em>) is unnecessary waste of resources.</p>\n<h3 id=\"install-shiftit\"><a href=\"#install-shiftit\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Install <a href=\"https://github.com/fikovnik/ShiftIt/releases\">ShiftIt</a></h3>\n<p>This window management utility is helpful and highly configurable.\nConfigure it to use <code>cmd+option+arrow-key</code> for top/left/right/bottom and <code>cmd+option+space</code> for maximize</p>\n<h3 id=\"install-clippy\"><a href=\"#install-clippy\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Install <a href=\"https://github.com/Clipy/Clipy/releases\">Clippy</a></h3>\n<p>Clipboard management of my choice.\nConfigure it to use <code>cmd+option+v</code> for menu.</p>\n<h2 id=\"dot-files\"><a href=\"#dot-files\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>dot-files</h2>\n<p>If you're interested in my dot-files, you can view them <a href=\"https://github.com/bogas04/dot-files\">here</a>.</p>\n","fileName":"my macos setup.md"},{"title":"Monorepos, lets talk about it","description":"Recall the days when you were just introduced to git or a similar type ofversion control system. I’m guessing you must have faced some…","date":"2019-09-17T07:55:58.095Z","categories":"[]","keywords":["git","repository","monorepos","coding","lerna","javascript"],"slug":"monorepos-lets-talk-about-it-9-17-2019","isDraft":false,"image":"/img/blog/1__zWhHZUDWuxJwfEoumC1__OQ.png","html":"<p><img src=\"/img/blog/1__zWhHZUDWuxJwfEoumC1__OQ.png\" alt=\"Image credits: undraw\"></p>\n<p>Recall the days when you were just introduced to <code>git</code> or a similar type of version control system. I’m guessing you must have faced some friction initially, how it breaks your flow, how you just can’t merge to master without rebasing/merging changes in first.</p>\n<p>Despite that, you might agree today that it’s actually very helpful in collaborating with the team, and those pain points were necessary to get here.</p>\n<p>Monorepos are somewhat similar.</p>\n<p>While git was solving problems around managing single codebase with multiple team members or just better versioning, Monorepo kind of does the same but for multiple projects/codebases.</p>\n<h3 id=\"the-what\"><a href=\"#the-what\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The what.</h3>\n<blockquote>\n<p>Is Monorepo that cool font I see on Twitter?</p>\n</blockquote>\n<p><img src=\"/img/blog/1__ZzlBaQH6w1BgwZdo3bIYRQ.png\" alt=\"Image credits: undraw\"></p>\n<p>Before diving into the topic, let’s first understand what Monorepo truly means. This is what Wikipedia has to say:</p>\n<blockquote>\n<p>In revision control systems, a Monorepo is a software development strategy where code for many projects are stored in the same repository.</p>\n</blockquote>\n<p>In other words, your ‘Work’ folder is close to what a Monorepo would look like. It would have packages that deal with server, web app, native app, documentation, etc.</p>\n<p>This is different from a ‘monolith’ where all your application logic is<br>\ncentralized to one entry point as opposed to distributed services (microservices).</p>\n<p>While code for various services would sit in a single repository, it doesn’t mean it would be deployed as a single entity, just like your ‘Work’ folder. Individual projects have separate life-cycles.</p>\n<h3 id=\"the-why\"><a href=\"#the-why\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The why.</h3>\n<blockquote>\n<p>So, do I just <code>git add</code> my entire ‘Work’ folder?</p>\n</blockquote>\n<blockquote>\n<p>“Why would you want to do this? Whatever happened to separation of concern?”</p>\n</blockquote>\n<p>There are several arguments both in favour and against Monorepos. And I don’t mean “Oh Google uses it” kind of arguments. This blog will give a sneak-peek into our problems and Monorepo’s solutions to them.</p>\n<p>Regardless, I recommend that you identify the problems your codebase is facing, and see if Monorepo is truly the answer to those.</p>\n<h3 id=\"the-story\"><a href=\"#the-story\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The story.</h3>\n<p>Before moving to Monorepo, we as a team worked on 3 codebases at the same time;</p>\n<ul>\n<li><strong>dweb</strong> (Desktop website of Swiggy)</li>\n<li><strong>mweb</strong> (Mobile website of Swiggy)</li>\n<li><strong>service</strong> (API proxy NodeJS middleware, used by dweb and mweb)</li>\n</ul>\n<p>When I say work, I mean writing features, updating build pipeline, reviewing code and fixing bugs.</p>\n<p>As the codebases grew, we recognized some patterns:</p>\n<p><img src=\"/img/blog/1____L__bUfSLVT6EboXRO7SSGg.png\" alt=\"Image credits: undraw\"></p>\n<ul>\n<li>Features written on mweb, while dissimilar enough to not to be dragged and dropped to dweb, held enough similarities to be broken into reusable parts.</li>\n<li>Fixes that go on mweb are also needed on dweb.</li>\n<li>Code reviewers often ended up reviewing the same code (between mweb and dweb) in a slightly different context.</li>\n<li>Code review changes on dweb are also relevant to mweb</li>\n<li>Changes to contracts of service, a common dependency, are also needed to be individually coded, tested, and reviewed.</li>\n<li>Updating dependencies like <a href=\"https://reactjs.org/\">React</a>/<a href=\"https://webpack.js.org/\">Webpack</a>/<a href=\"https://babeljs.io/\">Babel</a> becomes cumbersome between the two codebases.</li>\n<li>Conventions are difficult to enforce between the three repositories. One has an older version of <a href=\"https://eslint.org/\">ESLint</a>, one hasn’t been updated when new lint rules were added, one is still using old test runner.</li>\n<li>Attempts to make a new repository to keep common code failed due to the amount of setup and code management. Imagine working with multiple team members on multiple repositories with multiple Pull Requests.</li>\n</ul>\n<p>As you can see, while the projects are very different (check out <a href=\"https://portal-sentry.swiggyapp.com/settings/swiggy/go-front-staging/keys/\">swiggy.com</a> on your desktop and mobile to realize that), they still have quite a lot of common code interactions.</p>\n<blockquote>\n<p>Bike-shedding: Have you tried <a href=\"https://www.swiggy.com?utm_source=medium\">Swiggy</a> website on your desktop or mobile browser? We would love to hear your feedback!</p>\n</blockquote>\n<h3 id=\"the-how\"><a href=\"#the-how\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The how.</h3>\n<p><img src=\"/img/blog/1__0WjBWfdkbcob39FMklwp7A.png\" alt=\"Logo of Lerna\"></p>\n<p><a href=\"https://lerna.js.org/\">https://lerna.js.org/</a></p>\n<p>Depending on your ecosystem, there will be different tools to help you with maintaining a Monorepo. You can obviously go vanilla and just use different folders per project. We use <a href=\"https://lerna.js.org/\">Lerna</a> for maintaining our JavaScript codebase.</p>\n<p>Thanks to its community, there’s a <a href=\"https://github.com/lerna/lerna/tree/master/commands/publish\">lot</a> <a href=\"https://github.com/lerna/lerna/blob/master/FAQ.md\">of</a> <a href=\"https://lerna.js.org/#commands\">documentation</a> and <a href=\"https://medium.com/mitterio/multirepo-to-lerna-js-monorepo-80f6657cb443\">help</a> for Lerna <a href=\"https://github.com/lerna/lerna/blob/master/doc/troubleshooting.md\">related</a> <a href=\"https://github.com/lerna/lerna/blob/master/doc/guides.md\">queries</a>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install lerna globally</span>\n<span class=\"token function\">npm</span> i -g lerna\n\n<span class=\"token comment\"># Change directory to your work folder</span>\n<span class=\"token builtin class-name\">cd</span> ~/Work\n\n<span class=\"token comment\"># Make the folder you want to keep your monorepo in</span>\n<span class=\"token function\">mkdir</span> portal-web\n\n<span class=\"token comment\"># Change directory to monorepo folder</span>\n<span class=\"token builtin class-name\">cd</span> portal-web\n\n<span class=\"token comment\"># Initialize lerna (it will handle `git init`)</span>\nlerna init\n\n<span class=\"token comment\"># Commit the changes</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Initial commit\"</span>\n\n<span class=\"token comment\"># Import other packages (https://github.com/lerna/lerna/tree/master/commands/import)</span>\nlerna <span class=\"token function\">import</span> ~/Work/portal-mweb\n\n<span class=\"token comment\"># That's pretty much it!</span>\n\n<span class=\"token comment\"># Fun fact: If you want to rename your package, simply rename the folder before importing.</span>\n<span class=\"token comment\"># Fun fact 2: You might need to flatten out the commits in most cases (https://github.com/lerna/lerna/tree/master/commands/import#--flatten)</span>\n</code></pre></div>\n<p>You may use <a href=\"https://gist.github.com/bogas04/874731db80967c040209fea396bf7804\">above scripts</a> to import existing repositories to a lerna based monorepo.</p>\n<p>Running scripts from the root has been made simpler using these handy <a href=\"https://docs.npmjs.com/misc/scripts\">npm scripts</a>.</p>\n<p>These scripts allow for convenient way to invoke package scripts from root folder</p>\n<p>Since our packages are hosted in <a href=\"https://verdaccio.org/\">internal npm registry</a>, we inject a .npmrc in our <a href=\"https://jenkins.io/\">Jenkins</a> build the pipeline to avoid committing the authToken.</p>\n<p>A script to find all scoped dependencies of a project</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Install monorepo dependencies from internal npm registry</span>\n<span class=\"token function\">npm</span> i <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/scripts/scope-packages.js @portal<span class=\"token variable\">`</span></span>\n\n<span class=\"token comment\"># Fun fact:</span>\n<span class=\"token comment\"># `npm i &#x3C;package-name>` would also install other dependencies if they aren't present in node_modules,</span>\n<span class=\"token comment\"># along with the mentioned &#x3C;package-name></span>\n\n<span class=\"token comment\"># Fun fact 2:</span>\n<span class=\"token comment\"># In presence of package-lock.json, `npm i` would use those version numbers instead of fetching the latest ones</span>\n<span class=\"token comment\"># This essentially makes it a hybrid of `npm i` and `npm ci`</span>\n</code></pre></div>\n<p>One interesting thing about <a href=\"https://lerna.js.org/\">Lerna</a> is that it <a href=\"https://gist.github.com/bogas04/8c9702aba064b03b1162a0058c7b8f98\">doesn’t</a> want private packages to be part of the <code>package-lock.json.</code> This means we can’t just simply use <code>npm ci</code>. We use this bash script to get past that.</p>\n<h3 id=\"the-happy-part\"><a href=\"#the-happy-part\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The happy part.</h3>\n<p>Within a few months of making this change, we tippled the number of packages in our Monorepo. We also saw much more work done on the linting front, leading to a more consistent codebase.</p>\n<p>The linter is common to entire Monorepo, and each new rule affects all the packages.</p>\n<ul>\n<li><strong>config</strong> (webpack config as a package, reused by mweb and dweb)</li>\n<li><strong>ui</strong> (a package to create common patterns of design to be used in mobile and desktop, thus enabling us to work on creating a Swiggy’s design system)</li>\n<li><strong>payments</strong> (a package of Swiggy’s payments page, used by multiple tenants)</li>\n<li><strong>reviews</strong> (a package of Swiggy’s Ratings and Reviews page and components, used by mweb and dweb)</li>\n<li><strong>helpers</strong> (a package of common reusable logic, something like lodash)</li>\n<li><strong>daily</strong> (swiggydaily.com, reuses 2 components from mweb)</li>\n<li><strong>cache</strong> (a caching module used by mweb and dweb)</li>\n<li><strong>restaurant-url</strong> (a restaurant slug generator, multiple tenants)</li>\n</ul>\n<p><img src=\"/img/blog/1__kvwGrM__62LBXWLHxH__QwGw.png\" alt=\"Image credits: undraw\"></p>\n<p>I think that giving the option to easily create a new package incentivizes developers to think in more modular terms. They don’t think in the context of an app but rather in a more general way.</p>\n<p>It also discourages them from touching modules that are used by multiple tenants, and use <a href=\"https://semver.org/\">semantic versioning</a> appropriately.</p>\n<p>The benefits we are seeing out of this are just amazing:</p>\n<ul>\n<li>Writing the same fix for dweb and mweb is faster, as it’s just one commit.</li>\n<li>No more <code>npm link</code> mess.</li>\n<li>Reviewing a fix for both dweb and mweb is faster, as it’s just one Pull Request on one repository by one team member.</li>\n<li>Reusing and updating build pipeline is much more seamless.</li>\n<li>Updating major dependencies/lint rules is super easy.</li>\n<li>The collocation of code encourages developers to copy-paste less and reuse more.</li>\n<li>Writing reusable modules becomes easier, leading to better software engineering.</li>\n</ul>\n<h3 id=\"the-sad-part\"><a href=\"#the-sad-part\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The sad part.</h3>\n<p>But it ain’t all fun. Our PR section is a bit noisier. It’s not like we’re somehow writing more code, but that changes to any package comes to spotlight and doesn’t get silently updated.</p>\n<ul>\n<li>Too many packages lead to longer bootstrap times.</li>\n<li>Leveraging the benefits of Monorepo takes time.</li>\n<li>The code navigation is slightly slower. Developers are now opening individual packages to work around that.</li>\n</ul>\n<p><strong>Update:</strong> There’s one more point I would like to touch upon. Our approach currently colocates applications with libraries. ‘mweb’ is a private package in the sense it isn’t published to our npm registry, however ‘ui’ is a public package that can be consumed by mulitple tenants. This leads to heterogeneity in the monorepo. We are okay with this mix as</p>\n<ul>\n<li>it reduces friction of local development (no npm links).</li>\n<li>colocation leads to easy refactors and library creations.</li>\n<li>code review is simpler when it’s all one repository.</li>\n</ul>\n<h3 id=\"the-verdict\"><a href=\"#the-verdict\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The verdict.</h3>\n<p>So far we’re seeing Monorepo architecture a better fit for our growing codebase and team. It also impacts the way we design new libraries and components, often promoting clearer separations of concerns.</p>\n<p><img src=\"/img/blog/1__O3UIYiDjYTXMAZd7GBMwVg.png\" alt=\"Image credits: undraw\"></p>\n<p>Should you use monorepo? Like all things, it depends on TM! I hope this blog gave enough insight to you as to why we started using a Monorepo, and how it’s benefiting us.</p>\n<blockquote>\n<p>DISCLAIMER: We don’t advocate for any of the tools, libraries, coding practices or software development philosophies mentioned here. You are welcome to read, learn, accept, reject and critique however you see fit.</p>\n</blockquote>\n","fileName":"Monorepos. Let’s talk about it.md"},{"title":"Sharing made ridiculously easy with Web Share API","description":"With growing mobile usage, performance and leanness (yeah, that’s a word) isbecoming top priority for web apps. Oddly enough, sharing has…","date":"2017-09-22T16:27:20.946Z","categories":"[]","keywords":["web share api","web apis","browser","DOM","PWA","web apps"],"slug":"sharing-made-ridiculously-easy-with-web-share-api-9-22-2017","isDraft":false,"image":"/img/blog/1__qp3z0ij8v372R__DVbuJB6Q.jpeg","html":"<p><img src=\"/img/blog/1__qp3z0ij8v372R__DVbuJB6Q.jpeg\" alt=\"Image with icons of social media platforms\"></p>\n<blockquote>\n<p>With growing mobile usage, performance and leanness (yeah, that’s a word) is becoming top priority for web apps. Oddly enough, sharing has never worked out well for web, until now (hopefully).</p>\n</blockquote>\n<h4 id=\"history-time\"><a href=\"#history-time\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>History time</h4>\n<p>Since the social network explosion, ad revenue on page views and obsession with <a href=\"http://digg.com/\">digg</a>-ing websites, social sharing “widgets” have polluted our browsing experience with numerous flaws:</p>\n<p><img src=\"/img/blog/1__rW9LubrRX5l06KUeRoCzsA.png\" alt=\"\"></p>\n<ul>\n<li>They came with a dozen of JavaScript SDK files for every-single-social-network.</li>\n<li>They were usually “sticky”, because that’s so cool.</li>\n<li>They were hard to style, always looking pretty off from your website’s look and feel.</li>\n<li>They almost always lacked one social network which was big in your region or for your audience.</li>\n</ul>\n<p>All these flaws became more prominent with rise of smartphones. SDKs burdened (and <a href=\"https://medium.freecodecamp.org/why-16-of-the-code-on-the-average-site-belongs-to-facebook-and-what-that-means-68956cd731be\">still do</a>) the network and CPU, “sticky” widgets janked scrolling, and became unsurprisingly <a href=\"http://thinksem.com/blog/floating-social-media-share-bar-good-or-bad/\">very annoying</a> at smaller resolutions (like they weren’t otherwise). And they certainly weren’t meant for everyone.</p>\n<p>While solutions like lazy-loading and simpler designs helped a lot, it still is a painful job to find the right widget for your website, tweak it till the point it isn’t an eye-sore, only to find out that the users aren’t digg-ing it anymore (shameless pun-intended), and want to share it on XYZ messenger, which doesn’t have an <a href=\"https://faq.whatsapp.com/en/android/28000012\">intent</a> URL yet.</p>\n<p><img src=\"/img/blog/1__4xpPKwDeI__BomsMMRntRTw.png\" alt=\"1990s called and it wants you to reply back.\">\n1990s called and it wants you to reply back.</p>\n<p>Sadly, browsers haven’t cared enough to innovate much in this space lately. There were several attempts by Mozilla, Chrome and even <a href=\"http://www.lovemysurface.net/using-windows-8-share-charm-surface/\">Windows 8</a>. While they still let you “email” your website on Desktop, and share to your favorite app on mobile, but that’s about it. Developer has no control over the shared title, content or the URL, which is a bigger problem when we talk about SPAs with fancy URLs.</p>\n<h4 id=\"tldr\"><a href=\"#tldr\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>tl;dr</h4>\n<p>And this changes with <a href=\"https://developers.google.com/web/updates/2016/09/navigator-share\">Web Share API</a>. Wow, that’s quite a lot of build up for a simple API, isn’t it ? But this API is remarkable !</p>\n<p>And that’s it ! In order to use it, you need to meet following conditions though:</p>\n<blockquote>\n<p>Your site must be served over <a href=\"https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\">HTTPS</a>.</p>\n</blockquote>\n<blockquote>\n<p>You can only invoke the API in response to a user action, such as a click (e.g., you can’t call <code>navigator.share</code> as part of the page load).</p>\n</blockquote>\n<blockquote>\n<p>You can also share any URL, not just URLs under your website’s current scope: and you may also share <code>text</code> without a URL.</p>\n</blockquote>\n<blockquote>\n<p>You should feature-detect it in case it’s not available on your users’ platform (e.g., via <code>'share' in navigator</code>)</p>\n</blockquote>\n<p>The API is still a proposal, however it’s implemented in Chrome 61, which is the latest stable version at time of writing. Which means, in next 6 weeks, this API would be available on almost every other Android phone. If you’re still not sold and think intents are the way to go, you can head over to the <a href=\"https://github.com/WICG/web-share/blob/master/docs/explainer.md#frequently-asked-questions\">FAQ</a> section of the proposal to learn about some decent arguments.</p>\n<p>The <a href=\"http://mobile.twitter.com/\">awesome PWA</a> of <a href=\"https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3\">Twitter</a> already uses <img src=\"/img/blog/1__tGS6QdpXiL7m21oPm25v7A.png\" alt=\"Web Share API for sharing tweets.\"></p>\n<h4 id=\"future\"><a href=\"#future\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Future</h4>\n<p>Did I say that’s it? Because that isn’t it yet.</p>\n<ul>\n<li>The share data (title, url and text presently) isn’t just limited to current set. There <a href=\"https://wicg.github.io/web-share/#extensibility-of-this-api\">would</a> be additions to it in future, <code>image</code> being one for example.</li>\n<li>There’s a sibling API, <a href=\"https://github.com/mgiuca/web-share-target\">Web Share Target</a>, which allows a <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a> to be listed in the native app share drawer. This brings web apps way closer to the native experience. Learn more about that proposal <a href=\"https://github.com/mgiuca/web-share-target/blob/master/docs/explainer.md\">here</a>.</li>\n</ul>\n<h4 id=\"contribute\"><a href=\"#contribute\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Contribute</h4>\n<p>So start adding support to this awesome API right now, and if you would like to have this API well supported please follow/vote/share/contribute to the bug numbers I’m listing below;</p>\n<ul>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1402369\">Firefox Bug 1402369</a></li>\n<li><a href=\"https://bugs.webkit.org/show_bug.cgi?id=171100\">Webkit Bug 171100</a></li>\n<li><a href=\"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/31563175-implement-web-share-api\">Edge User Voice</a></li>\n</ul>\n","fileName":"Sharing made ridiculously easy with Web Share API.md"},{"title":"My 15 kg weight loss journey","description":"So coming to my story, I didn’t quite intend to lose weight, or follow anydiet, or did a rigorous workout. I believe that it’s basically…","date":"2017-07-20T10:31:03.755Z","categories":"[]","keywords":["weight loss","vegan","plant based diet","dieting","health"],"slug":"my-15-kg-weight-loss-journey-7-20-2017","isDraft":false,"image":"/img/blog/1__AW6KCuaBBSUSWKu8dIrmLA.png","html":"<p><img src=\"/img/blog/1__AW6KCuaBBSUSWKu8dIrmLA.png\" alt=\"A picture showing downward trend of my body weight from 90kg to 69kg over few months\"></p>\n<p>So coming to my story, I didn’t quite intend to lose weight, or follow any diet, or did a rigorous workout. I believe that it’s basically the result of negative-feedback in my brain. Sounds weird right? I’ll explain.</p>\n<h3 id=\"before\"><a href=\"#before\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Before</h3>\n<p>I’ll first go through initial state variables;</p>\n<ul>\n<li>Age: 22 years and 9 months</li>\n<li>Weight: 87 kilograms | 191 pounds</li>\n<li>Height: 174 centimeters | 5 feet 8.5 inches</li>\n<li>Waist: 91 centimeters | 36 inches</li>\n<li><a href=\"https://www.nhlbi.nih.gov/health/educational/lose_wt/BMI/bmi-m.htm\">BMI</a>: 28.7 (Overweight, 4 kilograms from being obese)</li>\n<li><a href=\"https://www.health-calc.com/body-composition/waist-to-height-ratio\">Waist to Height</a>: 0.52 (Males at increased risk)</li>\n<li>Vegetarian? ✔</li>\n<li>Very low sugar intake? ✔</li>\n<li>Significant workout throughout the day? ✗</li>\n</ul>\n<p>Depending on where you come from, this might not look bad enough, and which was the exact attitude that kept me from doing anything significant about it (and I never did!). I tried the gym, but I always felt it wasn’t quite a sustainable solution, I wanted something that I could do in my daily routine.</p>\n<p>It’s like, you can starve for 2 months and lose plenty, but that one day when you decide to eat something good, you just lose your control. Similarly, you might work out well for 2 months, but a long vacation to grandma’s might be enough to make you lousy again. These are very fragile methods in my opinion, for my sort of lifestyle in which work, commute, <em>*cough* Netflix</em> take most of the time.</p>\n<h3 id=\"the-change\"><a href=\"#the-change\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The Change</h3>\n<p>So what started the chain of events was this app called <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.fitness\">Google Fit</a>. It’s a basic fitness app that uses your phone sensors to calculate steps/calories burnt/distance covered. That’s pretty much it.</p>\n<p><img src=\"/img/blog/1__WFkALvcY68HD__PaoixgiiQ.png\" alt=\"23rd of February is when I installed the app, though it took 3 days to get me to work on my goal.\">\n23rd of February is when I installed the app, though it took 3 days to get me to work on my goal.</p>\n<p>Annnnd I forgot about it for three days. I opened it one day to see that I actually completed the goal of 10,000 steps on a Saturday when I went for a walk by the lake. That was easy! What I also observed was that I roughly burnt 1,700 ~ 2,000 calories by doing nothing throughout the day. Even if the data isn’t accurate, the sensor and environment conditions remain the same, making it a reliable way to observe variations and not the absolute values.</p>\n<p>My brain was intrigued by these numbers. It’s almost how you add hashtags to Instagram posts to get more likes, and once you do get more, you overdo it, and the cycle continues. Just that, here you get likes from health!</p>\n<p><img src=\"/img/blog/1__EmZytUAuspI__mycZ__o9OGw.png\" alt=\"VERY TECHNICAL. MUCH SCIENCE.\">\nVERY TECHNICAL. MUCH SCIENCE.</p>\n<p>So the first thing I did was that I <em>reduced the goal to 9,000 steps</em> to make myself feel better. And every week I increased it by 500–1000 steps as and when I started getting a good rhythm.</p>\n<p>The other thing that I did was that I took interest in knowing calories of things I ate daily. By learning that a spoon of oil has as many calories as a bowl of corn flakes, which in turn has as many calories as a can of cola, I somehow started making food at home to avoid the extra cheese/butter/oil the chefs put in.</p>\n<p><img src=\"/img/blog/1__UFCQ__sve25zCXqzQc__rYxA.png\" alt=\"Remember, one is a breakfast, one is a drink with a snack, and other is added to your lunch just like that!\">\nRemember, one is a breakfast, one is a drink with a snack, and other is added to your lunch just like that!</p>\n<p>Again, didn’t intend to, it’s just my brain trying to optimize calorie intake.</p>\n<p>Not only I became more aware of the calories that I put it, I also started reducing them by simply cooking at home with better alternatives.</p>\n<p>This number was insightful in an indirect way. Knowing that I was burning say 2000 calories daily, by ensuring low-calorie diet (without compromises), and burning more than the usual 2000, there was no way for me to not lose weight. And I did.</p>\n<p><img src=\"/img/blog/1__7emoMCCIFij0dncEASB94g.gif\" alt=\"MILLIONS OF CALORIES\">\nMILLIONS OF CALORIES</p>\n<p>Losing weight is really no rocket-science. Either take in lesser calories or burn more than you eat or BOTH!</p>\n<p>Adding to these two numbers, I also bought a nice digital weighing scale, only to get depressed every morning, which again helped me complete those extra 500 steps or choose fruits overs chips for snacks.</p>\n<p>So to summarize, all I did was;</p>\n<ul>\n<li>Ensure I complete my steps daily, and increase them ever-so-slightly every week. I stopped increasing beyond 15,000 steps though.</li>\n<li>Count calories of random food that I regularly ate, and replaced with better non-processed alternatives.</li>\n<li>Eat out less often.</li>\n<li>Check my weight regularly. The more aware I became of how previous day’s activity resulted in lower weight, the more my brain took it as a reward and probably released <a href=\"https://en.wikipedia.org/wiki/Oxytocin\">Oxytocin</a> to give a sense of contentment and incompleteness at the same time. Negative feedback.</li>\n</ul>\n<h3 id=\"the-results\"><a href=\"#the-results\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>The Results</h3>\n<p><img src=\"/img/blog/1__OHlYFf__A8U689ORGveNMHA.png\" alt=\"Downward trend of weight\"></p>\n<ul>\n<li>Age: 23 years and 1 month</li>\n<li>Weight: 72 kilograms | 158.7 pounds</li>\n<li>Height: 174 centimeters | 5 feet 8.5 inches</li>\n<li>Waist: 84 centimeters | 33 inches</li>\n<li><a href=\"https://www.nhlbi.nih.gov/health/educational/lose_wt/BMI/bmi-m.htm\">BMI</a>: 23.8 (Normal weight, 4 kilograms from being overweight)</li>\n<li><a href=\"https://www.health-calc.com/body-composition/waist-to-height-ratio\">Waist to Height</a>: 0.48 (OK)</li>\n<li>Pseudo-Vegan? ✔</li>\n<li>Very low sugar intake? ✔</li>\n<li>Significant workout throughout the day? ✔</li>\n</ul>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Conclusion</h3>\n<p>I basically lost roughly 1 kilogram a week. At the same time I also went to grandma’s house (= fat rich food), ate out and ate heavy items (= too many calories), and even fall ill (= very little walk). I simply increased my steps for those days or did extra steps later. Basically, I didn’t change my lifestyle at all, apart from dedicating 2–3 hours to walk and cooking daily.</p>\n<p><img src=\"/img/blog/1__B3QKpZdPXxmFaDsc9XQbdg.png\" alt=\"I meet my goals daily, and compensate whenever I eat outside.\">\nI meet my goals daily, and compensate whenever I eat outside.</p>\n<p>So by minor changes in my lifestyle, I found myself becoming less lethargic, which only helped me improve it more and more. I could work for long hours, walk for 2 hours, then cook food and still feel active!</p>\n<p>Over time, I also found myself leaning towards a vegan diet. Watching <a href=\"http://www.cowspiracy.com/\">Cowspiracy</a> and <a href=\"http://www.whatthehealthfilm.com/\">What the Health</a> helped me with it greatly. I still have milk in coffee (creamer as it’s called in the west) &#x26; ice creams on some days though. Still working on it. YouTube Channels like <a href=\"https://www.youtube.com/user/rawvegannotgross\">Raw. Vegan. Not Gross</a> &#x26; <a href=\"https://www.youtube.com/channel/UCEjkioV3LO_OIUaSWRxFZ3A\">Cheap Lazy Vegan</a> help me a lot with non-dairy experiments. It’s simply unavailability of vegan alternatives in India that make me lose to coffee creamer.</p>\n<p>Some clarifications I want to make here;</p>\n<ul>\n<li>I didn’t starve. I just ate better alternatives. I still had plenty of cheat days, but with reduced quantities and compensation for same.</li>\n<li>I didn’t exhaust myself. Walking is the most basic exercise which is good for general health and doesn’t quite focus on any one body part. I lost weight not only from my calves &#x26; thighs, but also from my face, arms, and waist. I also did push-ups to ensure muscle growth in torso region.</li>\n<li>Girls are still not interested in me. Sigh.</li>\n<li>Men on other hand compliment, saying I’ve become leaner. PROFIT???</li>\n</ul>\n<p>As always, it worked for me, but might not work for you. However, I’ve seen people reduce weight just by, say, getting rid of sugar, or meat, or dairy. In my case, these were already pretty much absent. Apparently, dieting wasn’t enough to pull this off alone, which is why I believe basic exercise like walking together with a better diet helped me overall. My advice would be to not look at long term gains, but to compare between days and weeks.</p>\n<p>My quest is still on. I intend to sit in the middle of the ideal BMI range, and also improve on my Vegan skills.</p>\n<p>Here’s a before (Feb 2017, 87kg | 192lb) &#x26; after (Oct 2017, 69kg | 152 lb) picture.</p>\n<blockquote>\n<p><strong>Update Nov 2017:</strong> I lost even more weight since the time I posted this blog, about 3–4 kgs (6.6–8.8 lbs). And I also turned full vegan.</p>\n</blockquote>\n<p>PS:</p>\n<ul>\n<li>BMI and other such metrics have flaws. Don’t be too serious about them.</li>\n<li>Losing weight doesn’t always mean better health. Consult a dietitian or whatever.</li>\n<li>Feel free to analyze my case &#x26; give remarks.</li>\n</ul>\n","fileName":"My 15 kg weight loss journey.md"},{"title":"Release of Samsung Internet Chrome Extension v2","description":"","Update Oct 2017":"Since the release of v2 (March 2017), we saw a 9.3x increasein our monthly active users (~8k to 75k). We also observed…","date":"2017-03-09T06:02:13.793Z","categories":"[]","keywords":["google chrome","chrome extension","samsung","samsung internet","bookmarks"],"slug":"release-of-samsung-internet-chrome-extension-v2-3-9-2017","isDraft":false,"image":"/img/blog/1__e16MS4BgBe8e__DtlF666JA.png","html":"<blockquote>\n<p><strong>Update Oct 2017:</strong> Since the release of v2 (March 2017), we saw a <strong>9.3x increase</strong> in our monthly active users (~8k to 75k). We also observed <strong>35% jump</strong> in the rating. Thank you so much for using &#x26; liking our extension, stay tuned for more updates!</p>\n</blockquote>\n<p><img src=\"/img/blog/1__e16MS4BgBe8e__DtlF666JA.png\" alt=\"\"></p>\n<p>Today we are very glad to release the much awaited <a href=\"https://chrome.google.com/webstore/detail/samsung-internet/epejdmjgfibjaffbmojllapapjejipkh\">version 2</a> of our Chrome Extension. <a href=\"https://chrome.google.com/webstore/detail/samsung-internet/epejdmjgfibjaffbmojllapapjejipkh\">Install</a> it today to sync bookmarks across your Chrome browser on PC and Samsung Internet.</p>\n<p>The Samsung Internet extension, earlier known as Samsung Sync (v1.4), not only sports a new name but also comes with tonnes of features and a massive UI overhaul. I’ll walk-through the new additions in the article.</p>\n<blockquote>\n<p>Drastic improvements to first-sync performance.</p>\n</blockquote>\n<p>First-sync performance was the number one complaint in our web store reviews, usually leaving users to never actually getting around to use our extension. We hit the heart of the issue with a dagger by rewriting several modules and chaining network requests, database queries and DOM updates in a much more optimized manner. With this release, you can now not only see the progress of sync, but also the fetched bookmarks as and when they arrive. We feel this will solve the top complaint and allow users to enjoy the extension.</p>\n<p><img src=\"/img/blog/1__qYPi94TVyTF1p1aX1BCW9g.gif\" alt=\"\"></p>\n<blockquote>\n<p>Consistent UI with <a href=\"https://play.google.com/store/apps/details?id=com.sec.android.app.sbrowser\">Samsung Internet on Android.</a></p>\n</blockquote>\n<p>We are proud of our UX team’s efforts in offering a very modern look and feel to the extension. The small 600 x 400 screen real estate makes it much harder to add features while keeping the interface user-friendly. After several iterations, I think we’ve pretty much nailed it. From a progress bar to show sync status to modals for bookmark management, the UI even though offering several functionalities doesn’t overwhelm the user.</p>\n<p><img src=\"/img/blog/1__hE8PGhNMYIhyt3WsuEF50Q.png\" alt=\"Live loading of bookmarks, top requested feature.\">\nLive loading of bookmarks, top requested feature.</p>\n<blockquote>\n<p>Enhanced bookmark management.</p>\n</blockquote>\n<p>The previous version (1.4) was bit limiting in the sense users could only edit title or delete a bookmark. We felt that the extension can offer much more than that and with today’s release, not only basic create / update / delete / move is supported, but users can also import Chrome bookmarks into their Samsung account. We feel that this brings the control back to the user.</p>\n<p><img src=\"/img/blog/1__d6bWg__Yhi2DyDM0JSZdrjA.png\" alt=\"Improved Bookmark Management\">\nImproved Bookmark Management</p>\n<blockquote>\n<p>And much more…</p>\n</blockquote>\n<p>The feature list just doesn’t stop here ! Some of the other miscellaneous changes:</p>\n<ul>\n<li>Context menu support to bookmark current tab with a single click.<br>\n<em>Pro tip: You can use</em> <strong><em>Ctrl/Cmd + Shift + Y</em></strong> <em>combination to bookmark instantly.</em></li>\n<li>Improved internationalization for supported languages.</li>\n<li>Improved keyboard accessibility, you can tab your way through all items.</li>\n</ul>\n<blockquote>\n<p><strong>Update April 2017:</strong> Version 2.0.5 is now released to Chrome Web Store that fixes login related issues faced by certain users with the previous version (2.0.3).</p>\n</blockquote>\n<p>Let us know if you run into issues, or just want to give us some feedback. We’ll follow up soon with our plans for releasing the extension for other browsers. Make sure you follow <a href=\"https://medium.com/samsung-internet-dev\">Samsung Internet Developers</a> on <a href=\"https://twitter.com/samsunginternet\">twitter</a>.</p>\n<p><strong>Note:</strong> The Sync functionality is only available for phones logged in with a Samsung Account on a stable release of Samsung Internet, which means that it won’t work with <a href=\"https://medium.com/samsung-internet-dev/samsung-internet-beta-now-available-without-sign-up-e0d5d4010838#.ntaxejovf\">Samsung Internet Beta</a> (v5.4) on non-samsung phones, just yet.</p>\n","fileName":"Release of Samsung Internet Chrome Extension v2.md"},{"title":"Living in Suwon, Korea","description":"First of all, let me clear out that I’m not a blogger, and definitely not asequipped in English as I would say I’m in JavaScript.","date":"2016-11-27T11:48:44.318Z","categories":"[]","keywords":["travel","south korea","suwon","seoul","sikh","vegetarian"],"slug":"living-in-suwon-korea-11-27-2016","isDraft":false,"image":"/img/blog/south-korea-xmas.jpg","html":"<p>First of all, let me clear out that I’m not a blogger, and definitely not as equipped in English as I would say I’m in JavaScript. Now that’s been established, let’s talk about me, Samsung and Suwon.</p>\n<p><img src=\"/img/blog/south-korea-xmas.jpg\" alt=\"Christmas celebrations in Seoul, South Korea\"></p>\n<h3 id=\"me\"><a href=\"#me\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Me</h3>\n<p>A Sikh Male rocking sick beard with a Punjabi Turban, and Orange Gaatra that holds a long <a href=\"https://en.wikipedia.org/wiki/Kirpan\">Kirpan</a>.</p>\n<p><img src=\"/img/blog/1__sCPawDEOQs9dTX5wPN4e__A.jpeg\" alt=\"A Sikh Male rocking sick beard with a Punjabi Turban, and Orange Gaatra that holds a long Kirpan\"></p>\n<p>I’m a <a href=\"http://www.sikhiwiki.org/index.php/Main_Page\">Sikh</a> male who graduated from <a href=\"http://nsit.ac.in/\">NSIT</a>, <a href=\"https://en.wikipedia.org/wiki/New_Delhi\">New Delhi</a> in Computer Engineering discipline in 2016. Before starting off my engineering career, I’d developed horrible Visual Basic applications and knew exactly what I wanted to do in my life; create <a href=\"https://www.youtube.com/watch?v=d5LzH2sh1rk\">stupid</a> UIs with no knowledge of design. After joining the college, I made a very sane unintentional decision of learning JavaScript to make websites/webapps. Back then, JavaScript wasn’t even looked upon as a serious language, NodeJS was in its baby years of popularity, and using jQuery was cool. But I don’t know why, I kept coding in it. And this very thing and some luck landed me up in a summer internship at Samsung R&#x26;D Institute, Bangalore where I worked on a NodeJS project. And that lead me to,,, wait, I need to start a Samsung heading.</p>\n<h3 id=\"samsung\"><a href=\"#samsung\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Samsung</h3>\n<p><img src=\"/img/blog/1____g5l9BybNJiUO22dNPEeYg.jpeg\" alt=\"Samsung Digital City, Suwon\">\nSamsung Digital City, Suwon</p>\n<p>Yeah, so that lead me to a full time job at SRIB, which again lead me to Suwon, the place where HQ of Samsung Electronics resides. I’m part of Web Team in SRIB, that is also responsible for <a href=\"https://medium.com/samsung-internet-dev\">Samsung Internet</a>, and I am currently overhauling the <a href=\"https://chrome.google.com/webstore/detail/samsung-sync/epejdmjgfibjaffbmojllapapjejipkh?hl=en\">Samsung Sync extension</a>. Expect a major update soon!</p>\n<p>It’s funny how the ship of JavaScript sailed me across from one island to another. And now, I’m typing this from Suwon as my last week of business trip is about to start.</p>\n<p>I love the wide range of technologies that exist within Samsung Electronics. This provides a great canvas for freshers to try and experiment with all domains without having to switch jobs.</p>\n<h3 id=\"korea\"><a href=\"#korea\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Korea</h3>\n<p>This last week has brought several memories of this 2 month stay in Korea, which in turn encouraged me to write this post on a Sunday evening.</p>\n<p><img src=\"/img/blog/1__ng__tz1ZRfUcuEaSPWdKFdQ.jpeg\" alt=\"Somewhere in Suwon\">\nSomewhere in Suwon</p>\n<p>The country is amazing, it’s a developed nation, which is a thing a citizen of a developing nation would observe first. The racial and social security is really great here, in contrast to west where <a href=\"https://en.wikipedia.org/wiki/Islamophobia\">Islamophobia</a> is a big deal. And the people are really humble. I love how everyone greets you and bows down a little, they take out time to wish you well, and that’s heart warming for a foreigner.</p>\n<p><img src=\"/img/blog/1__qDzv5NoBmcDetWPiftOj__A.jpeg\" alt=\"Hotel staff at DreamVill\">\nHotel staff at DreamVill</p>\n<p>I was lucky enough to witness both falls; fall fall and first snowfall, former being a phenomenon that doesn’t really exist in India.</p>\n<p><img src=\"/img/blog/1__KvkZ__uwm7oa3ENgorLT5ug.jpeg\" alt=\"\">\n<img src=\"/img/blog/1__BrdQH1cUwbrbO6MO7QF__aQ.jpeg\" alt=\"Fall Leaves\">\nFall Leaves</p>\n<p><img src=\"/img/blog/1__zRKNo__JVjQFn2EOCwQ1QNA.gif\" alt=\"Snow Falls\">\nSnow Falls</p>\n<p>However, as a vegetarian I found myself at great discomfort in finding food outside DreamVill that serves Indian cuisine. So for vegetarian/vegan visitors, please bring some packaged food if you’re planning a long visit.</p>\n<p><a href=\"https://www.google.co.kr/maps/place/Hwaseong+Fortress/@37.2807935,127.0102456,15z/data=!4m2!3m1!1s0x0:0x809c61d30ab56214?sa=X&#x26;ved=0ahUKEwipktCA7sjQAhWFybwKHUA4B8QQ_BIIgwEwDg\">Hwaseong Fortress</a>]</p>\n<p><a href=\"/img/blog/1__RDHDZhOnDTUKypNH__vp1wQ.jpeg\">Imagee of Hwaseong Fortress</a></p>\n<p>Some places like <a href=\"https://www.google.com/maps/place/%ED%8C%8C%EB%A6%AC%EB%B0%94%EA%B2%8C%EB%9C%A8+%EC%98%81%ED%86%B5%EB%89%B4%EC%9B%94%EB%93%9C%EC%A0%90/@37.2536243,127.0674148,15z/data=!4m8!1m2!2m1!1sparis+baguette!3m4!1s0x0:0x794b659d3dad89b8!8m2!3d37.2520187!4d127.0710522?hl=en\">Paris Baguette</a>, <a href=\"https://www.google.com/maps/place/%EB%9A%9C%EB%A0%88%EC%A5%AC%EB%A5%B4/@37.2536913,127.0674148,15z/data=!4m8!1m2!2m1!1sTous+Les+Jours!3m4!1s0x357b44c4c1f2a6bd:0xb1aff268e48c54e2!8m2!3d37.2520193!4d127.0709693?hl=en\">Tous Les Jours</a> etc. are good to look for vegan/vegetarian bread or salad sandwiches. If you’re lucky enough, you can find meat-free salads at bakeries and eateries of the like however.</p>\n<p><img src=\"/img/blog/1__axarHRa8ZbcIwJwJr2xGoA.jpeg\" alt=\"Early Christmas Decorations in Seoul\">\nEarly Christmas Decorations in Seoul</p>\n<p>There are various tourist places that you can visit, though I primarily remained near the city. As a Sikh, it was pleasant surprise to find a <a href=\"https://en.wikipedia.org/wiki/Gurdwara\">Gurdwara</a> in the country however. Run by primarily the <a href=\"https://en.wikipedia.org/wiki/Punjabis\">Punjabi</a> community, the Gurdwara is well maintained and open to all. I visited it during lunch time and it was lovely to find everyone enjoying <a href=\"https://en.wikipedia.org/wiki/Langar_%28Sikhism%29\">Langar</a> together on a Sunday noon.</p>\n<p><img src=\"/img/blog/1__x9oZ2fWNHKVWgEap__5YoCA.jpeg\" alt=\"Image of Gurdwara\">\n<a href=\"https://www.google.co.kr/maps/place/Gurudwara+Shri+Singh+Sabha/@37.8185614,127.1303603,15z/data=!4m2!3m1!1s0x0:0x7b23842b65fbbbd4?sa=X&#x26;ved=0ahUKEwjH0eHk7MjQAhVRNrwKHfTaBL8Q_BIIggEwCg\">Gurdwara Shri Singh Sabha Sahib</a></p>\n<h3 id=\"closing-note\"><a href=\"#closing-note\" aria-hidden=\"true\" tabindex=\"-1\"><span>🔗 </span></a>Closing Note</h3>\n<p>So as I begin packing for my return flight to India, I wish to thank every Korean that has helped me find my way and replied with an <a href=\"http://www.123rf.com/photo_8638384_serious-and-determined-young-man-makes-an-x-shape-with-his-arms-and-hands-this-could-mean-stop-cross.html\">arm cross</a> to my search of vegetarian food. Your country is amazing, and I definitely wish to visit it again, hopefully after learning Korean. Gamsahamnida :)</p>\n<p>Stick around to see more random blog posts from this idiot.</p>\n","fileName":"Living in Suwon, Korea.md"}]},"__N_SSG":true}