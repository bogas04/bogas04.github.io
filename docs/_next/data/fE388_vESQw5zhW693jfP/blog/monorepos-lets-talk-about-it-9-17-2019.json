{"pageProps":{"post":{"title":"Monorepos, lets talk about it","description":"Recall the days when you were just introduced to git or a similar type ofversion control system. I‚Äôm guessing you must have faced some‚Ä¶","date":"2019-09-17T07:55:58.095Z","categories":"[]","keywords":["git","repository","monorepos","coding","lerna","javascript"],"slug":"monorepos-lets-talk-about-it-9-17-2019","isDraft":false,"image":"/img/blog/1__zWhHZUDWuxJwfEoumC1__OQ.png","html":"<p><img src=\"/img/blog/1__zWhHZUDWuxJwfEoumC1__OQ.png\" alt=\"Image credits: undraw\"></p>\n<p>Recall the days when you were just introduced to <code>git</code> or a similar type of version control system. I‚Äôm guessing you must have faced some friction initially, how it breaks your flow, how you just can‚Äôt merge to master without rebasing/merging changes in first.</p>\n<p>Despite that, you might agree today that it‚Äôs actually very helpful in collaborating with the team, and those pain points were necessary to get here.</p>\n<p>Monorepos are somewhat similar.</p>\n<p>While git was solving problems around managing single codebase with multiple team members or just better versioning, Monorepo kind of does the same but for multiple projects/codebases.</p>\n<h3 id=\"user-content-the-what\"><a href=\"#the-what\" aria-hidden=\"true\" tabindex=\"-1\"><span>üîó </span></a>The what.</h3>\n<blockquote>\n<p>Is Monorepo that cool font I see on¬†Twitter?</p>\n</blockquote>\n<p><img src=\"/img/blog/1__ZzlBaQH6w1BgwZdo3bIYRQ.png\" alt=\"Image credits: undraw\"></p>\n<p>Before diving into the topic, let‚Äôs first understand what Monorepo truly means. This is what Wikipedia has to say:</p>\n<blockquote>\n<p>In revision control systems, a Monorepo is a software development strategy where code for many projects are stored in the same repository.</p>\n</blockquote>\n<p>In other words, your ‚ÄòWork‚Äô folder is close to what a Monorepo would look like. It would have packages that deal with server, web app, native app, documentation, etc.</p>\n<p>This is different from a ‚Äòmonolith‚Äô where all your application logic is<br>\ncentralized to one entry point as opposed to distributed services (microservices).</p>\n<p>While code for various services would sit in a single repository, it doesn‚Äôt mean it would be deployed as a single entity, just like your ‚ÄòWork‚Äô folder. Individual projects have separate life-cycles.</p>\n<h3 id=\"user-content-the-why\"><a href=\"#the-why\" aria-hidden=\"true\" tabindex=\"-1\"><span>üîó </span></a>The why.</h3>\n<blockquote>\n<p>So, do I just <code>git add</code> my entire ‚ÄòWork‚Äô¬†folder?</p>\n</blockquote>\n<blockquote>\n<p>‚ÄúWhy would you want to do this? Whatever happened to separation of concern?‚Äù</p>\n</blockquote>\n<p>There are several arguments both in favour and against Monorepos. And I don‚Äôt mean ‚ÄúOh Google uses it‚Äù kind of arguments. This blog will give a sneak-peek into our problems and Monorepo‚Äôs solutions to them.</p>\n<p>Regardless, I recommend that you identify the problems your codebase is facing, and see if Monorepo is truly the answer to those.</p>\n<h3 id=\"user-content-the-story\"><a href=\"#the-story\" aria-hidden=\"true\" tabindex=\"-1\"><span>üîó </span></a>The story.</h3>\n<p>Before moving to Monorepo, we as a team worked on 3 codebases at the same time;</p>\n<ul>\n<li><strong>dweb</strong> (Desktop website of Swiggy)</li>\n<li><strong>mweb</strong> (Mobile website of Swiggy)</li>\n<li><strong>service</strong> (API proxy NodeJS middleware, used by dweb and mweb)</li>\n</ul>\n<p>When I say work, I mean writing features, updating build pipeline, reviewing code and fixing bugs.</p>\n<p>As the codebases grew, we recognized some patterns:</p>\n<p><img src=\"/img/blog/1____L__bUfSLVT6EboXRO7SSGg.png\" alt=\"Image credits:¬†undraw\"></p>\n<ul>\n<li>Features written on mweb, while dissimilar enough to not to be dragged and dropped to dweb, held enough similarities to be broken into reusable parts.</li>\n<li>Fixes that go on mweb are also needed on dweb.</li>\n<li>Code reviewers often ended up reviewing the same code (between mweb and dweb) in a slightly different context.</li>\n<li>Code review changes on dweb are also relevant to mweb</li>\n<li>Changes to contracts of service, a common dependency, are also needed to be individually coded, tested, and reviewed.</li>\n<li>Updating dependencies like <a href=\"https://reactjs.org/\">React</a>/<a href=\"https://webpack.js.org/\">Webpack</a>/<a href=\"https://babeljs.io/\">Babel</a> becomes cumbersome between the two codebases.</li>\n<li>Conventions are difficult to enforce between the three repositories. One has an older version of <a href=\"https://eslint.org/\">ESLint</a>, one hasn‚Äôt been updated when new lint rules were added, one is still using old test runner.</li>\n<li>Attempts to make a new repository to keep common code failed due to the amount of setup and code management. Imagine working with multiple team members on multiple repositories with multiple Pull Requests.</li>\n</ul>\n<p>As you can see, while the projects are very different (check out <a href=\"https://portal-sentry.swiggyapp.com/settings/swiggy/go-front-staging/keys/\">swiggy.com</a> on your desktop and mobile to realize that), they still have quite a lot of common code interactions.</p>\n<blockquote>\n<p>Bike-shedding: Have you tried <a href=\"https://www.swiggy.com?utm_source=medium\">Swiggy</a> website on your desktop or mobile browser? We would love to hear your feedback!</p>\n</blockquote>\n<h3 id=\"user-content-the-how\"><a href=\"#the-how\" aria-hidden=\"true\" tabindex=\"-1\"><span>üîó </span></a>The how.</h3>\n<p><img src=\"/img/blog/1__0WjBWfdkbcob39FMklwp7A.png\" alt=\"Logo of Lerna\"></p>\n<p><a href=\"https://lerna.js.org/\">https://lerna.js.org/</a></p>\n<p>Depending on your ecosystem, there will be different tools to help you with maintaining a Monorepo. You can obviously go vanilla and just use different folders per project. We use <a href=\"https://lerna.js.org/\">Lerna</a> for maintaining our JavaScript codebase.</p>\n<p>Thanks to its community, there‚Äôs a <a href=\"https://github.com/lerna/lerna/tree/master/commands/publish\">lot</a> <a href=\"https://github.com/lerna/lerna/blob/master/FAQ.md\">of</a> <a href=\"https://lerna.js.org/#commands\">documentation</a> and <a href=\"https://medium.com/mitterio/multirepo-to-lerna-js-monorepo-80f6657cb443\">help</a> for Lerna <a href=\"https://github.com/lerna/lerna/blob/master/doc/troubleshooting.md\">related</a> <a href=\"https://github.com/lerna/lerna/blob/master/doc/guides.md\">queries</a>.</p>\n<div><pre><code><span># Install lerna globally</span>\n<span>npm</span> i <span>-g</span> lerna\n\n<span># Change directory to your work folder</span>\n<span>cd</span> ~/Work\n\n<span># Make the folder you want to keep your monorepo in</span>\n<span>mkdir</span> portal-web\n\n<span># Change directory to monorepo folder</span>\n<span>cd</span> portal-web\n\n<span># Initialize lerna (it will handle `git init`)</span>\nlerna init\n\n<span># Commit the changes</span>\n<span>git</span> <span>add</span> <span>.</span> <span>&#x26;&#x26;</span> <span>git</span> commit <span>-m</span> <span>\"Initial commit\"</span>\n\n<span># Import other packages (https://github.com/lerna/lerna/tree/master/commands/import)</span>\nlerna <span>import</span> ~/Work/portal-mweb\n\n<span># That's pretty much it!</span>\n\n<span># Fun fact: If you want to rename your package, simply rename the folder before importing.</span>\n<span># Fun fact 2: You might need to flatten out the commits in most cases (https://github.com/lerna/lerna/tree/master/commands/import#--flatten)</span>\n</code></pre></div>\n<p>You may use <a href=\"https://gist.github.com/bogas04/874731db80967c040209fea396bf7804\">above scripts</a> to import existing repositories to a lerna based monorepo.</p>\n<p>Running scripts from the root has been made simpler using these handy <a href=\"https://docs.npmjs.com/misc/scripts\">npm scripts</a>.</p>\n<p>These scripts allow for convenient way to invoke package scripts from root folder</p>\n<p>Since our packages are hosted in <a href=\"https://verdaccio.org/\">internal npm registry</a>, we inject a¬†.npmrc in our <a href=\"https://jenkins.io/\">Jenkins</a> build the pipeline to avoid committing the authToken.</p>\n<p>A script to find all scoped dependencies of a project</p>\n<div><pre><code><span># Install monorepo dependencies from internal npm registry</span>\n<span>npm</span> i <span><span>`</span><span>..</span>/<span>..</span>/scripts/scope-packages.js @portal<span>`</span></span>\n\n<span># Fun fact:</span>\n<span># `npm i &#x3C;package-name>` would also install other dependencies if they aren't present in node_modules,</span>\n<span># along with the mentioned &#x3C;package-name></span>\n\n<span># Fun fact 2:</span>\n<span># In presence of package-lock.json, `npm i` would use those version numbers instead of fetching the latest ones</span>\n<span># This essentially makes it a hybrid of `npm i` and `npm ci`</span>\n</code></pre></div>\n<p>One interesting thing about <a href=\"https://lerna.js.org/\">Lerna</a> is that it <a href=\"https://gist.github.com/bogas04/8c9702aba064b03b1162a0058c7b8f98\">doesn‚Äôt</a> want private packages to be part of the <code>package-lock.json.</code> This means we can‚Äôt just simply use <code>npm ci</code>. We use this bash script to get past that.</p>\n<h3 id=\"user-content-the-happypart\"><a href=\"#the-happypart\" aria-hidden=\"true\" tabindex=\"-1\"><span>üîó </span></a>The happy¬†part.</h3>\n<p>Within a few months of making this change, we tippled the number of packages in our Monorepo. We also saw much more work done on the linting front, leading to a more consistent codebase.</p>\n<p>The linter is common to entire Monorepo, and each new rule affects all the packages.</p>\n<ul>\n<li><strong>config</strong> (webpack config as a package, reused by mweb and dweb)</li>\n<li><strong>ui</strong> (a package to create common patterns of design to be used in mobile and desktop, thus enabling us to work on creating a Swiggy‚Äôs design system)</li>\n<li><strong>payments</strong> (a package of Swiggy‚Äôs payments page, used by multiple tenants)</li>\n<li><strong>reviews</strong> (a package of Swiggy‚Äôs Ratings and Reviews page and components, used by mweb and dweb)</li>\n<li><strong>helpers</strong> (a package of common reusable logic, something like lodash)</li>\n<li><strong>daily</strong> (swiggydaily.com, reuses 2 components from mweb)</li>\n<li><strong>cache</strong> (a caching module used by mweb and dweb)</li>\n<li><strong>restaurant-url</strong> (a restaurant slug generator, multiple tenants)</li>\n</ul>\n<p><img src=\"/img/blog/1__kvwGrM__62LBXWLHxH__QwGw.png\" alt=\"Image credits: undraw\"></p>\n<p>I think that giving the option to easily create a new package incentivizes developers to think in more modular terms. They don‚Äôt think in the context of an app but rather in a more general way.</p>\n<p>It also discourages them from touching modules that are used by multiple tenants, and use <a href=\"https://semver.org/\">semantic versioning</a> appropriately.</p>\n<p>The benefits we are seeing out of this are just amazing:</p>\n<ul>\n<li>Writing the same fix for dweb and mweb is faster, as it‚Äôs just one commit.</li>\n<li>No more <code>npm link</code> mess.</li>\n<li>Reviewing a fix for both dweb and mweb is faster, as it‚Äôs just one Pull Request on one repository by one team member.</li>\n<li>Reusing and updating build pipeline is much more seamless.</li>\n<li>Updating major dependencies/lint rules is super easy.</li>\n<li>The collocation of code encourages developers to copy-paste less and reuse more.</li>\n<li>Writing reusable modules becomes easier, leading to better software engineering.</li>\n</ul>\n<h3 id=\"user-content-the-sadpart\"><a href=\"#the-sadpart\" aria-hidden=\"true\" tabindex=\"-1\"><span>üîó </span></a>The sad¬†part.</h3>\n<p>But it ain‚Äôt all fun. Our PR section is a bit noisier. It‚Äôs not like we‚Äôre somehow writing more code, but that changes to any package comes to spotlight and doesn‚Äôt get silently updated.</p>\n<ul>\n<li>Too many packages lead to longer bootstrap times.</li>\n<li>Leveraging the benefits of Monorepo takes time.</li>\n<li>The code navigation is slightly slower. Developers are now opening individual packages to work around that.</li>\n</ul>\n<p><strong>Update:</strong> There‚Äôs one more point I would like to touch upon. Our approach currently colocates applications with libraries. ‚Äòmweb‚Äô is a private package in the sense it isn‚Äôt published to our npm registry, however ‚Äòui‚Äô is a public package that can be consumed by mulitple tenants. This leads to heterogeneity in the monorepo. We are okay with this mix as</p>\n<ul>\n<li>it reduces friction of local development (no npm links).</li>\n<li>colocation leads to easy refactors and library creations.</li>\n<li>code review is simpler when it‚Äôs all one repository.</li>\n</ul>\n<h3 id=\"user-content-the-verdict\"><a href=\"#the-verdict\" aria-hidden=\"true\" tabindex=\"-1\"><span>üîó </span></a>The verdict.</h3>\n<p>So far we‚Äôre seeing Monorepo architecture a better fit for our growing codebase and team. It also impacts the way we design new libraries and components, often promoting clearer separations of concerns.</p>\n<p><img src=\"/img/blog/1__O3UIYiDjYTXMAZd7GBMwVg.png\" alt=\"Image credits: undraw\"></p>\n<p>Should you use monorepo? Like all things, it depends on TM! I hope this blog gave enough insight to you as to why we started using a Monorepo, and how it‚Äôs benefiting us.</p>\n<blockquote>\n<p>DISCLAIMER: We don‚Äôt advocate for any of the tools, libraries, coding practices or software development philosophies mentioned here. You are welcome to read, learn, accept, reject and critique however you see¬†fit.</p>\n</blockquote>\n","fileName":"Monorepos. Let‚Äôs talk about it.md"}},"__N_SSG":true}